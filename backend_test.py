import requests
import sys
import json
from datetime import datetime

class AssetInventoryAPITester:
    def __init__(self, base_url="https://asset-flow-app.preview.emergentagent.com"):
        self.base_url = base_url
        self.api_url = f"{base_url}/api"
        self.tokens = {}  # Store tokens for different users
        self.users = {}   # Store user data
        self.test_data = {}  # Store created test data
        self.tests_run = 0
        self.tests_passed = 0

    def run_test(self, name, method, endpoint, expected_status, data=None, user_role=None):
        """Run a single API test"""
        url = f"{self.api_url}/{endpoint}"
        headers = {'Content-Type': 'application/json'}
        
        # Add auth header if user role specified
        if user_role and user_role in self.tokens:
            headers['Authorization'] = f'Bearer {self.tokens[user_role]}'

        self.tests_run += 1
        print(f"\nüîç Testing {name}...")
        
        try:
            if method == 'GET':
                response = requests.get(url, headers=headers, timeout=10)
            elif method == 'POST':
                response = requests.post(url, json=data, headers=headers, timeout=10)
            elif method == 'PUT':
                response = requests.put(url, json=data, headers=headers, timeout=10)
            elif method == 'DELETE':
                response = requests.delete(url, headers=headers, timeout=10)

            success = response.status_code == expected_status
            if success:
                self.tests_passed += 1
                print(f"‚úÖ Passed - Status: {response.status_code}")
                try:
                    return success, response.json()
                except:
                    return success, {}
            else:
                print(f"‚ùå Failed - Expected {expected_status}, got {response.status_code}")
                try:
                    error_detail = response.json()
                    print(f"   Error: {error_detail}")
                except:
                    print(f"   Response: {response.text}")
                return False, {}

        except Exception as e:
            print(f"‚ùå Failed - Error: {str(e)}")
            return False, {}

    def test_login(self, email, password, role_name):
        """Test login and store token"""
        print(f"\nüîê Testing login for {role_name} ({email})")
        success, response = self.run_test(
            f"Login {role_name}",
            "POST",
            "auth/login",
            200,
            data={"email": email, "password": password}
        )
        if success and 'session_token' in response:
            self.tokens[role_name] = response['session_token']
            self.users[role_name] = response['user']
            print(f"‚úÖ {role_name} login successful, token stored")
            return True
        print(f"‚ùå {role_name} login failed")
        return False

    def test_auth_me(self, role_name):
        """Test /auth/me endpoint"""
        success, response = self.run_test(
            f"Get current user info ({role_name})",
            "GET",
            "auth/me",
            200,
            user_role=role_name
        )
        return success

    def test_dashboard_stats(self, role_name):
        """Test dashboard stats endpoint"""
        success, response = self.run_test(
            f"Get dashboard stats ({role_name})",
            "GET",
            "dashboard/stats",
            200,
            user_role=role_name
        )
        if success:
            print(f"   Stats received: {list(response.keys())}")
        return success

    def test_asset_type_crud(self):
        """Test Asset Type CRUD operations"""
        print(f"\nüìã Testing Asset Type CRUD Operations")
        
        # Test Create (Admin)
        asset_type_data = {
            "code": "LAPTOP",
            "name": "Laptop Computers",
            "depreciation_applicable": True,
            "asset_life": 3,
            "to_be_recovered_on_separation": True,
            "status": "Active"
        }
        
        success, response = self.run_test(
            "Create Asset Type",
            "POST",
            "asset-types",
            200,
            data=asset_type_data,
            user_role="Administrator"
        )
        
        if success:
            self.test_data['asset_type_id'] = response['id']
            print(f"   Created asset type with ID: {response['id']}")
        
        # Test Get All Asset Types
        success, response = self.run_test(
            "Get All Asset Types",
            "GET",
            "asset-types",
            200,
            user_role="Administrator"
        )
        
        if success:
            print(f"   Found {len(response)} asset types")
        
        # Test Get Single Asset Type
        if 'asset_type_id' in self.test_data:
            success, response = self.run_test(
                "Get Single Asset Type",
                "GET",
                f"asset-types/{self.test_data['asset_type_id']}",
                200,
                user_role="Administrator"
            )
        
        # Test Update Asset Type
        if 'asset_type_id' in self.test_data:
            update_data = {"name": "Updated Laptop Computers"}
            success, response = self.run_test(
                "Update Asset Type",
                "PUT",
                f"asset-types/{self.test_data['asset_type_id']}",
                200,
                data=update_data,
                user_role="Administrator"
            )

    def test_asset_definition_crud(self):
        """Test Asset Definition CRUD operations"""
        print(f"\nüíª Testing Asset Definition CRUD Operations")
        
        if 'asset_type_id' not in self.test_data:
            print("‚ùå Skipping Asset Definition tests - no asset type created")
            return
        
        # Test Create Asset Definition
        asset_def_data = {
            "asset_type_id": self.test_data['asset_type_id'],
            "asset_code": "LAP001",
            "asset_description": "Dell Laptop",
            "asset_details": "Dell Inspiron 15 3000 Series",
            "asset_value": 50000.0,
            "asset_depreciation_value_per_year": 16666.67,
            "status": "Available"
        }
        
        success, response = self.run_test(
            "Create Asset Definition",
            "POST",
            "asset-definitions",
            200,
            data=asset_def_data,
            user_role="Administrator"
        )
        
        if success:
            self.test_data['asset_def_id'] = response['id']
            print(f"   Created asset definition with ID: {response['id']}")
        
        # Test Get All Asset Definitions
        success, response = self.run_test(
            "Get All Asset Definitions",
            "GET",
            "asset-definitions",
            200,
            user_role="Administrator"
        )
        
        if success:
            print(f"   Found {len(response)} asset definitions")

    def test_asset_requisition_workflow(self):
        """Test Enhanced Asset Requisition workflow"""
        print(f"\nüìù Testing Enhanced Asset Requisition Workflow")
        
        if 'asset_type_id' not in self.test_data:
            print("‚ùå Skipping Requisition tests - no asset type created")
            return
        
        # Test 1: New Allocation Request (Self)
        from datetime import datetime, timedelta
        required_by_date = (datetime.now() + timedelta(days=7)).isoformat()
        
        requisition_data = {
            "asset_type_id": self.test_data['asset_type_id'],
            "request_type": "New Allocation",
            "request_for": "Self",
            "justification": "Need laptop for development work",
            "required_by_date": required_by_date
        }
        
        success, response = self.run_test(
            "Create New Allocation Request (Employee)",
            "POST",
            "asset-requisitions",
            200,
            data=requisition_data,
            user_role="Employee"
        )
        
        if success:
            self.test_data['requisition_id'] = response['id']
            print(f"   Created requisition ID: {response['id'][:8]}...")
            print(f"   Request type: {response['request_type']}")
            print(f"   Request for: {response['request_for']}")
            print(f"   Required by: {response.get('required_by_date', 'Not set')}")
        
        # Test 2: Replacement Request with conditional fields
        replacement_data = {
            "asset_type_id": self.test_data['asset_type_id'],
            "request_type": "Replacement",
            "reason_for_return_replacement": "Current laptop screen is damaged",
            "asset_details": "Dell Inspiron 15, Serial: DL123456, screen has cracks",
            "request_for": "Self",
            "justification": "Need replacement laptop due to hardware failure",
            "required_by_date": required_by_date
        }
        
        success, response = self.run_test(
            "Create Replacement Request (Employee)",
            "POST",
            "asset-requisitions",
            200,
            data=replacement_data,
            user_role="Employee"
        )
        
        if success:
            print(f"   Replacement request ID: {response['id'][:8]}...")
            print(f"   Reason: {response['reason_for_return_replacement'][:30]}...")
            print(f"   Asset details: {response['asset_details'][:30]}...")
        
        # Test 3: Return Request
        return_data = {
            "asset_type_id": self.test_data['asset_type_id'],
            "request_type": "Return",
            "reason_for_return_replacement": "Project completed, no longer needed",
            "asset_details": "MacBook Pro 16, Serial: MP789012, good condition",
            "request_for": "Self",
            "justification": "Returning equipment after project completion"
        }
        
        success, response = self.run_test(
            "Create Return Request (Employee)",
            "POST",
            "asset-requisitions",
            200,
            data=return_data,
            user_role="Employee"
        )
        
        if success:
            print(f"   Return request ID: {response['id'][:8]}...")
        
        # Test 4: Team Member Request (if we have team members)
        if "Administrator" in self.tokens:
            # Get users to find a team member
            success, users_response = self.run_test(
                "Get Users for Team Member Test",
                "GET",
                "users",
                200,
                user_role="Administrator"
            )
            
            if success and users_response:
                team_member = None
                for user in users_response:
                    user_roles = user.get('roles', [])
                    if any(role in ['Employee', 'Manager'] for role in user_roles) and user['id'] != self.users.get('Employee', {}).get('id'):
                        team_member = user
                        break
                
                if team_member:
                    team_member_data = {
                        "asset_type_id": self.test_data['asset_type_id'],
                        "request_type": "New Allocation",
                        "request_for": "Team Member",
                        "team_member_employee_id": team_member['id'],
                        "justification": "New team member needs laptop for onboarding",
                        "required_by_date": required_by_date
                    }
                    
                    success, response = self.run_test(
                        "Create Team Member Request (Employee)",
                        "POST",
                        "asset-requisitions",
                        200,
                        data=team_member_data,
                        user_role="Employee"
                    )
                    
                    if success:
                        print(f"   Team member request ID: {response['id'][:8]}...")
                        print(f"   Team member: {response.get('team_member_name', 'Unknown')}")
        
        # Test 5: Validation - Replacement without conditional fields (should fail)
        invalid_replacement = {
            "asset_type_id": self.test_data['asset_type_id'],
            "request_type": "Replacement",
            "request_for": "Self",
            "justification": "Need replacement"
            # Missing reason_for_return_replacement and asset_details
        }
        
        success, response = self.run_test(
            "Invalid Replacement Request (Should Fail)",
            "POST",
            "asset-requisitions",
            422,  # Expecting validation error
            data=invalid_replacement,
            user_role="Employee"
        )
        
        if success:
            print("   ‚úÖ Validation correctly rejected replacement without conditional fields")
        
        # Test 6: Team Member request without member ID (should fail)
        invalid_team_request = {
            "asset_type_id": self.test_data['asset_type_id'],
            "request_type": "New Allocation",
            "request_for": "Team Member",
            "justification": "Need for team member"
            # Missing team_member_employee_id
        }
        
        success, response = self.run_test(
            "Invalid Team Member Request (Should Fail)",
            "POST",
            "asset-requisitions",
            400,  # Expecting validation error
            data=invalid_team_request,
            user_role="Employee"
        )
        
        if success:
            print("   ‚úÖ Validation correctly rejected team member request without member ID")
        
        # Test Get Requisitions for different roles
        for role in ["Employee", "Manager", "HR Manager", "Administrator"]:
            if role in self.tokens:
                success, response = self.run_test(
                    f"Get Asset Requisitions ({role})",
                    "GET",
                    "asset-requisitions",
                    200,
                    user_role=role
                )
                if success:
                    print(f"   {role} can see {len(response)} requisitions")
                    # Check if enhanced fields are present
                    if response and len(response) > 0:
                        req = response[0]
                        enhanced_fields = ['request_type', 'request_for', 'required_by_date']
                        present_fields = [field for field in enhanced_fields if field in req]
                        print(f"   Enhanced fields present: {present_fields}")

    def test_role_based_access(self):
        """Test role-based access control"""
        print(f"\nüîí Testing Role-Based Access Control")
        
        # Test Employee trying to create asset type (should fail)
        asset_type_data = {
            "code": "TEST",
            "name": "Test Asset",
            "depreciation_applicable": False
        }
        
        success, response = self.run_test(
            "Employee Create Asset Type (Should Fail)",
            "POST",
            "asset-types",
            403,  # Expecting forbidden
            data=asset_type_data,
            user_role="Employee"
        )
        
        if success:
            print("   ‚úÖ Employee correctly denied access to create asset type")
        
        # Test Manager trying to create asset type (should fail)
        success, response = self.run_test(
            "Manager Create Asset Type (Should Fail)",
            "POST",
            "asset-types",
            403,  # Expecting forbidden
            data=asset_type_data,
            user_role="Manager"
        )
        
        if success:
            print("   ‚úÖ Manager correctly denied access to create asset type")

    def test_validation_rules(self):
        """Test business validation rules"""
        print(f"\n‚úÖ Testing Validation Rules")
        
        # Test asset type with depreciation but no asset life
        invalid_asset_type = {
            "code": "INVALID",
            "name": "Invalid Asset",
            "depreciation_applicable": True,
            # Missing asset_life
        }
        
        success, response = self.run_test(
            "Create Asset Type Without Asset Life (Should Fail)",
            "POST",
            "asset-types",
            400,  # Expecting bad request
            data=invalid_asset_type,
            user_role="Administrator"
        )
        
        if success:
            print("   ‚úÖ Validation correctly rejected asset type without asset life")
        
        # Test duplicate asset type code
        if 'asset_type_id' in self.test_data:
            duplicate_asset_type = {
                "code": "LAPTOP",  # Same as existing
                "name": "Duplicate Laptop",
                "depreciation_applicable": False
            }
            
            success, response = self.run_test(
                "Create Duplicate Asset Type Code (Should Fail)",
                "POST",
                "asset-types",
                400,  # Expecting bad request
                data=duplicate_asset_type,
                user_role="Administrator"
            )
            
            if success:
                print("   ‚úÖ Validation correctly rejected duplicate asset type code")

    def test_user_management(self):
        """Test Multi-Role User Management CRUD operations with new fields"""
        print(f"\nüë• Testing Multi-Role User Management Operations")
        
        # Test 1: Create Manager User with single role (for reporting manager tests)
        manager_data = {
            "email": f"manager_{datetime.now().strftime('%H%M%S')}@company.com",
            "name": "Test Manager",
            "roles": ["Manager"],
            "designation": "Senior Manager",
            "date_of_joining": "2023-01-15T00:00:00Z",
            "password": "TestPassword123!"
        }
        
        success, response = self.run_test(
            "Create Manager User with New Fields",
            "POST",
            "users",
            200,
            data=manager_data,
            user_role="Administrator"
        )
        
        if success:
            self.test_data['manager_user_id'] = response['id']
            print(f"   Created manager with ID: {response['id']}")
            print(f"   Designation: {response.get('designation', 'Not set')}")
            print(f"   Date of Joining: {response.get('date_of_joining', 'Not set')}")
            print(f"   Roles: {response.get('roles', [])}")
        
        # Test 2: Create User with multiple roles
        multi_role_data = {
            "email": f"multirole_{datetime.now().strftime('%H%M%S')}@company.com",
            "name": "Multi Role User",
            "roles": ["Manager", "Employee"],
            "designation": "Team Lead",
            "date_of_joining": "2024-01-01T00:00:00Z",
            "password": "TestPassword123!"
        }
        
        success, response = self.run_test(
            "Create User with Multiple Roles",
            "POST",
            "users",
            200,
            data=multi_role_data,
            user_role="Administrator"
        )
        
        if success:
            self.test_data['multi_role_user_id'] = response['id']
            print(f"   Created multi-role user with ID: {response['id']}")
            print(f"   Roles: {response.get('roles', [])}")
        
        # Test 3: Create Employee User with all new fields including reporting manager
        employee_data = {
            "email": f"employee_{datetime.now().strftime('%H%M%S')}@company.com",
            "name": "Test Employee",
            "roles": ["Employee"],
            "designation": "Software Developer",
            "date_of_joining": "2024-03-01T00:00:00Z",
            "reporting_manager_id": self.test_data.get('manager_user_id'),
            "password": "TestPassword123!"
        }
        
        success, response = self.run_test(
            "Create Employee with Reporting Manager",
            "POST",
            "users",
            200,
            data=employee_data,
            user_role="Administrator"
        )
        
        if success:
            self.test_data['employee_user_id'] = response['id']
            print(f"   Created employee with ID: {response['id']}")
            print(f"   Designation: {response.get('designation', 'Not set')}")
            print(f"   Reporting Manager ID: {response.get('reporting_manager_id', 'Not set')}")
            print(f"   Reporting Manager Name: {response.get('reporting_manager_name', 'Not set')}")
        
        # Test 4: Create User without optional fields (should default to Employee role)
        basic_user_data = {
            "email": f"basic_{datetime.now().strftime('%H%M%S')}@company.com",
            "name": "Basic User",
            "password": "TestPassword123!"
        }
        
        success, response = self.run_test(
            "Create User Without Optional Fields",
            "POST",
            "users",
            200,
            data=basic_user_data,
            user_role="Administrator"
        )
        
        if success:
            self.test_data['basic_user_id'] = response['id']
            print(f"   Created basic user with ID: {response['id']}")
            print(f"   Default roles: {response.get('roles', [])}")
        
        # Test 5: Get Managers API
        success, response = self.run_test(
            "Get All Managers",
            "GET",
            "users/managers",
            200,
            user_role="Administrator"
        )
        
        if success:
            print(f"   Found {len(response)} managers")
            manager_found = False
            for manager in response:
                if manager.get('id') == self.test_data.get('manager_user_id'):
                    manager_found = True
                    print(f"   ‚úÖ Created manager found in managers list")
                    break
            if not manager_found and self.test_data.get('manager_user_id'):
                print(f"   ‚ö†Ô∏è Created manager not found in managers list")
        
        # Test 6: Validation - Invalid reporting manager (not marked as manager)
        invalid_reporting_data = {
            "email": f"invalid_{datetime.now().strftime('%H%M%S')}@company.com",
            "name": "Invalid Reporting Test",
            "roles": ["Employee"],
            "reporting_manager_id": self.test_data.get('basic_user_id'),  # Basic user is not a manager
            "password": "TestPassword123!"
        }
        
        success, response = self.run_test(
            "Create User with Invalid Reporting Manager (Should Fail)",
            "POST",
            "users",
            400,
            data=invalid_reporting_data,
            user_role="Administrator"
        )
        
        if success:
            print("   ‚úÖ Validation correctly rejected non-manager as reporting manager")
        
        # Test 7: Validation - Non-existent reporting manager
        nonexistent_reporting_data = {
            "email": f"nonexist_{datetime.now().strftime('%H%M%S')}@company.com",
            "name": "Non-existent Reporting Test",
            "roles": ["Employee"],
            "reporting_manager_id": "non-existent-id",
            "password": "TestPassword123!"
        }
        
        success, response = self.run_test(
            "Create User with Non-existent Reporting Manager (Should Fail)",
            "POST",
            "users",
            400,
            data=nonexistent_reporting_data,
            user_role="Administrator"
        )
        
        if success:
            print("   ‚úÖ Validation correctly rejected non-existent reporting manager")
        
        # Test 8: Update User with new fields and roles
        if 'employee_user_id' in self.test_data:
            update_data = {
                "designation": "Senior Software Developer",
                "roles": ["Manager", "Employee"],  # Promote to manager with multiple roles
                "reporting_manager_id": None  # Clear reporting manager
            }
            success, response = self.run_test(
                "Update User with Multiple Roles",
                "PUT",
                f"users/{self.test_data['employee_user_id']}",
                200,
                data=update_data,
                user_role="Administrator"
            )
            
            if success:
                print(f"   Updated designation: {response.get('designation', 'Not set')}")
                print(f"   Updated roles: {response.get('roles', [])}")
                print(f"   Cleared reporting manager: {response.get('reporting_manager_id', 'Not cleared')}")
        
        # Test 9: Update User - Set new reporting manager
        if 'basic_user_id' in self.test_data and 'manager_user_id' in self.test_data:
            update_data = {
                "reporting_manager_id": self.test_data['manager_user_id'],
                "designation": "Junior Developer"
            }
            success, response = self.run_test(
                "Update User - Set Reporting Manager",
                "PUT",
                f"users/{self.test_data['basic_user_id']}",
                200,
                data=update_data,
                user_role="Administrator"
            )
            
            if success:
                print(f"   Set reporting manager: {response.get('reporting_manager_name', 'Not set')}")
        
        # Test 10: Update User - Invalid reporting manager validation
        if 'basic_user_id' in self.test_data and 'employee_user_id' in self.test_data:
            invalid_update_data = {
                "reporting_manager_id": self.test_data['basic_user_id']  # Basic user is not a manager
            }
            success, response = self.run_test(
                "Update User with Invalid Reporting Manager (Should Fail)",
                "PUT",
                f"users/{self.test_data['employee_user_id']}",
                400,
                data=invalid_update_data,
                user_role="Administrator"
            )
            
            if success:
                print("   ‚úÖ Update validation correctly rejected non-manager as reporting manager")
        
        # Test 11: Get All Users and verify new fields are present
        success, response = self.run_test(
            "Get All Users - Verify New Fields",
            "GET",
            "users",
            200,
            user_role="Administrator"
        )
        
        if success:
            print(f"   Found {len(response)} users")
            if response:
                user = response[0]
                new_fields = ['designation', 'date_of_joining', 'roles', 'reporting_manager_id', 'reporting_manager_name']
                present_fields = [field for field in new_fields if field in user]
                print(f"   New fields present in user data: {present_fields}")
        
        # Test 12: Get Single User and verify all fields
        if 'employee_user_id' in self.test_data:
            success, response = self.run_test(
                "Get Single User - Verify All Fields",
                "GET",
                f"users/{self.test_data['employee_user_id']}",
                200,
                user_role="Administrator"
            )
            
            if success:
                print(f"   User details:")
                print(f"     Name: {response.get('name', 'Not set')}")
                print(f"     Designation: {response.get('designation', 'Not set')}")
                print(f"     Date of Joining: {response.get('date_of_joining', 'Not set')}")
                print(f"     Roles: {response.get('roles', [])}")
                print(f"     Reporting Manager: {response.get('reporting_manager_name', 'None')}")
        
        # Test 13: Employee trying to access user management (should fail)
        success, response = self.run_test(
            "Employee Get Users (Should Fail)",
            "GET",
            "users",
            403,  # Expecting forbidden
            user_role="Employee"
        )
        
        if success:
            print("   ‚úÖ Employee correctly denied access to user management")
        
        # Test 14: Employee trying to access managers endpoint (should fail)
        success, response = self.run_test(
            "Employee Get Managers (Should Fail)",
            "GET",
            "users/managers",
            403,  # Expecting forbidden
            user_role="Employee"
        )
        
        if success:
            print("   ‚úÖ Employee correctly denied access to managers endpoint")

    def test_multi_role_system(self):
        """Test Multi-Role System functionality"""
        print(f"\nüé≠ Testing Multi-Role System")
        
        # Test 1: Role hierarchy - Administrator access
        success, response = self.run_test(
            "Administrator Access to Employee Functions",
            "GET",
            "dashboard/stats",
            200,
            user_role="Administrator"
        )
        
        if success:
            print("   ‚úÖ Administrator can access employee functions (role hierarchy)")
        
        # Test 2: Role hierarchy - HR Manager access to Employee functions
        if "HR Manager" in self.tokens:
            success, response = self.run_test(
                "HR Manager Access to Employee Functions",
                "GET",
                "dashboard/stats",
                200,
                user_role="HR Manager"
            )
            
            if success:
                print("   ‚úÖ HR Manager can access employee functions (role hierarchy)")
        
        # Test 3: Role hierarchy - Manager access to Employee functions
        if "Manager" in self.tokens:
            success, response = self.run_test(
                "Manager Access to Employee Functions",
                "GET",
                "dashboard/stats",
                200,
                user_role="Manager"
            )
            
            if success:
                print("   ‚úÖ Manager can access employee functions (role hierarchy)")
        
        # Test 4: Test demo user login with roles array
        demo_login_data = {
            "email": "admin@company.com",
            "password": "password123"
        }
        
        success, response = self.run_test(
            "Demo User Login with Roles Array",
            "POST",
            "auth/login",
            200,
            data=demo_login_data
        )
        
        if success:
            user_roles = response.get('user', {}).get('roles', [])
            print(f"   Demo user roles: {user_roles}")
            if isinstance(user_roles, list) and len(user_roles) > 0:
                print("   ‚úÖ Demo user has roles array")
            else:
                print("   ‚ùå Demo user missing roles array")
        
        # Test 5: Managers endpoint filtering by roles array
        success, response = self.run_test(
            "Managers Endpoint Filtering by Roles Array",
            "GET",
            "users/managers",
            200,
            user_role="Administrator"
        )
        
        if success:
            print(f"   Found {len(response)} managers")
            for manager in response:
                manager_roles = manager.get('roles', [])
                if 'Manager' in manager_roles:
                    print(f"   ‚úÖ Manager {manager.get('name', 'Unknown')} has Manager role in roles array")
                else:
                    print(f"   ‚ùå Manager {manager.get('name', 'Unknown')} missing Manager role in roles array")
        
        # Test 6: Multi-role validation - User with multiple roles accessing different endpoints
        if 'multi_role_user_id' in self.test_data:
            # Create a session for the multi-role user
            multi_role_login = {
                "email": f"multirole_{datetime.now().strftime('%H%M%S')}@company.com",
                "password": "TestPassword123!"
            }
            
            # Note: This would require the user to actually exist and be able to login
            # For now, we'll test the creation and retrieval of multi-role users
            success, response = self.run_test(
                "Get Multi-Role User Details",
                "GET",
                f"users/{self.test_data['multi_role_user_id']}",
                200,
                user_role="Administrator"
            )
            
            if success:
                user_roles = response.get('roles', [])
                print(f"   Multi-role user roles: {user_roles}")
                if len(user_roles) > 1:
                    print("   ‚úÖ User successfully created with multiple roles")
                else:
                    print("   ‚ùå User does not have multiple roles")

    def test_company_profile(self):
        """Test Company Profile operations (Administrator only)"""
        print(f"\nüè¢ Testing Company Profile Operations")
        
        # Test Get Company Profile (public endpoint)
        success, response = self.run_test(
            "Get Company Profile (Public)",
            "GET",
            "company-profile",
            200
        )
        
        if success:
            print(f"   Retrieved company profile: {response.get('company_name', 'Default')}")
        
        # Test Create/Update Company Profile (Administrator only)
        profile_data = {
            "company_name": "Test Company Inc.",
            "company_address": "123 Test Street, Test City",
            "company_phone": "+1-555-0123",
            "company_email": "info@testcompany.com",
            "company_website": "https://testcompany.com"
        }
        
        success, response = self.run_test(
            "Create/Update Company Profile (Administrator)",
            "POST",
            "company-profile",
            200,
            data=profile_data,
            user_role="Administrator"
        )
        
        if success:
            print(f"   Created/Updated company profile with ID: {response['id']}")
        
        # Test Update Company Profile (Administrator only)
        update_data = {"company_name": "Updated Test Company Inc."}
        success, response = self.run_test(
            "Update Company Profile (Administrator)",
            "PUT",
            "company-profile",
            200,
            data=update_data,
            user_role="Administrator"
        )
        
        # Test Employee trying to update company profile (should fail)
        success, response = self.run_test(
            "Employee Update Company Profile (Should Fail)",
            "POST",
            "company-profile",
            403,  # Expecting forbidden
            data=profile_data,
            user_role="Employee"
        )
        
        if success:
            print("   ‚úÖ Employee correctly denied access to company profile management")

    def test_password_change(self):
        """Test Password Change functionality (All authenticated users)"""
        print(f"\nüîë Testing Password Change Operations")
        
        # Test password change for Administrator
        password_data = {
            "current_password": "password123",
            "new_password": "NewPassword123!"
        }
        
        success, response = self.run_test(
            "Change Password (Administrator)",
            "POST",
            "auth/change-password",
            200,
            data=password_data,
            user_role="Administrator"
        )
        
        if success:
            print("   ‚úÖ Administrator password change successful")
        
        # Test password change with wrong current password (should fail)
        wrong_password_data = {
            "current_password": "wrongpassword",
            "new_password": "NewPassword123!"
        }
        
        success, response = self.run_test(
            "Change Password Wrong Current (Should Fail)",
            "POST",
            "auth/change-password",
            400,  # Expecting bad request
            data=wrong_password_data,
            user_role="Employee"
        )
        
        if success:
            print("   ‚úÖ Wrong current password correctly rejected")

    def test_bulk_import_template(self):
        """Test Bulk Import Template Download (Administrator/HR Manager only)"""
        print(f"\nüì• Testing Bulk Import Template Operations")
        
        # Test template download (Administrator)
        success, response = self.run_test(
            "Download Asset Definitions Template (Administrator)",
            "GET",
            "asset-definitions/template",
            200,
            user_role="Administrator"
        )
        
        if success:
            print("   ‚úÖ Template download successful for Administrator")
        
        # Test template download (HR Manager)
        if "HR Manager" in self.tokens:
            success, response = self.run_test(
                "Download Asset Definitions Template (HR Manager)",
                "GET",
                "asset-definitions/template",
                200,
                user_role="HR Manager"
            )
            
            if success:
                print("   ‚úÖ Template download successful for HR Manager")
        
        # Test Employee trying to download template (should fail)
        success, response = self.run_test(
            "Employee Download Template (Should Fail)",
            "GET",
            "asset-definitions/template",
            403,  # Expecting forbidden
            user_role="Employee"
        )
        
        if success:
            print("   ‚úÖ Employee correctly denied access to template download")

    def test_new_admin_features_access_control(self):
        """Test access control for all new administrator features"""
        print(f"\nüîê Testing New Admin Features Access Control")
        
        # Test various roles trying to access admin-only endpoints
        test_cases = [
            ("users", "GET", "Employee", 403),
            ("users", "GET", "Manager", 403),
            ("users", "GET", "HR Manager", 403),
            ("company-profile", "POST", "Employee", 403),
            ("company-profile", "POST", "Manager", 403),
            ("company-profile", "POST", "HR Manager", 403),
            ("asset-definitions/template", "GET", "Employee", 403),
            ("asset-definitions/template", "GET", "Manager", 403),
        ]
        
        for endpoint, method, role, expected_status in test_cases:
            if role in self.tokens:
                success, response = self.run_test(
                    f"{role} access {endpoint} (Should Fail)",
                    method,
                    endpoint,
                    expected_status,
                    user_role=role
                )
                
                if success:
                    print(f"   ‚úÖ {role} correctly denied access to {endpoint}")

    def test_asset_manager_dashboard_stats(self):
        """Test Asset Manager dashboard statistics"""
        print(f"\nüìä Testing Asset Manager Dashboard Stats")
        
        success, response = self.run_test(
            "Get Asset Manager Dashboard Stats",
            "GET",
            "dashboard/asset-manager-stats",
            200,
            user_role="Asset Manager"
        )
        
        if success:
            expected_keys = [
                "total_assets", "available_assets", "allocated_assets", 
                "damaged_assets", "lost_assets", "under_repair",
                "pending_allocations", "total_allocations", 
                "pending_retrievals", "completed_retrievals",
                "asset_type_breakdown", "allocation_rate", "availability_rate"
            ]
            missing_keys = [key for key in expected_keys if key not in response]
            if missing_keys:
                print(f"   ‚ö†Ô∏è Missing keys in response: {missing_keys}")
            else:
                print(f"   ‚úÖ All expected dashboard stats present")
                print(f"   Total Assets: {response.get('total_assets', 0)}")
                print(f"   Available: {response.get('available_assets', 0)}")
                print(f"   Allocated: {response.get('allocated_assets', 0)}")
                print(f"   Pending Allocations: {response.get('pending_allocations', 0)}")
        
        return success

    def test_asset_allocations(self):
        """Test Asset Allocation functionality"""
        print(f"\nüéØ Testing Asset Allocation Operations")
        
        # First, ensure we have test data
        if 'requisition_id' not in self.test_data or 'asset_def_id' not in self.test_data:
            print("‚ùå Skipping Asset Allocation tests - missing requisition or asset definition")
            return False
        
        # Test Get Asset Allocations
        success, response = self.run_test(
            "Get Asset Allocations",
            "GET",
            "asset-allocations",
            200,
            user_role="Asset Manager"
        )
        
        if success:
            print(f"   Found {len(response)} existing allocations")
        
        # Test Get Pending Allocations
        success, response = self.run_test(
            "Get Pending Allocations",
            "GET",
            "pending-allocations",
            200,
            user_role="Asset Manager"
        )
        
        if success:
            print(f"   Found {len(response)} pending allocations")
        
        # Test Create Asset Allocation
        allocation_data = {
            "requisition_id": self.test_data['requisition_id'],
            "asset_definition_id": self.test_data['asset_def_id'],
            "remarks": "Test allocation for automated testing",
            "reference_id": "REF001",
            "document_id": "DOC001",
            "dispatch_details": "Dispatched via courier"
        }
        
        success, response = self.run_test(
            "Create Asset Allocation",
            "POST",
            "asset-allocations",
            200,
            data=allocation_data,
            user_role="Asset Manager"
        )
        
        if success:
            self.test_data['allocation_id'] = response['id']
            print(f"   Created allocation with ID: {response['id']}")
            print(f"   Status: {response.get('status', 'Unknown')}")
        
        # Test Get Allocated Assets
        success, response = self.run_test(
            "Get Allocated Assets",
            "GET",
            "allocated-assets",
            200,
            user_role="Asset Manager"
        )
        
        if success:
            print(f"   Found {len(response)} allocated assets")
        
        return success

    def test_asset_retrievals(self):
        """Test Asset Retrieval functionality"""
        print(f"\nüîÑ Testing Asset Retrieval Operations")
        
        if 'asset_def_id' not in self.test_data:
            print("‚ùå Skipping Asset Retrieval tests - missing asset definition")
            return False
        
        # Get employee ID for retrieval test
        employee_id = self.users.get("Employee", {}).get("id")
        if not employee_id:
            print("‚ùå Skipping Asset Retrieval tests - no employee user found")
            return False
        
        # Test Get Asset Retrievals
        success, response = self.run_test(
            "Get Asset Retrievals",
            "GET",
            "asset-retrievals",
            200,
            user_role="Asset Manager"
        )
        
        if success:
            print(f"   Found {len(response)} existing retrievals")
        
        # Test Create Asset Retrieval
        retrieval_data = {
            "employee_id": employee_id,
            "asset_definition_id": self.test_data['asset_def_id'],
            "remarks": "Employee separation - asset recovery required"
        }
        
        success, response = self.run_test(
            "Create Asset Retrieval",
            "POST",
            "asset-retrievals",
            200,
            data=retrieval_data,
            user_role="Asset Manager"
        )
        
        if success:
            self.test_data['retrieval_id'] = response['id']
            print(f"   Created retrieval with ID: {response['id']}")
            print(f"   Status: {response.get('status', 'Unknown')}")
        
        # Test Update Asset Retrieval
        if 'retrieval_id' in self.test_data:
            update_data = {
                "recovered": True,
                "asset_condition": "Good Condition",
                "recovery_value": 0.0,
                "remarks": "Asset recovered in good condition",
                "status": "Recovered"
            }
            
            success, response = self.run_test(
                "Update Asset Retrieval",
                "PUT",
                f"asset-retrievals/{self.test_data['retrieval_id']}",
                200,
                data=update_data,
                user_role="Asset Manager"
            )
            
            if success:
                print(f"   Updated retrieval status: {response.get('status', 'Unknown')}")
                print(f"   Recovered: {response.get('recovered', False)}")
        
        return success

    def test_asset_manager_access_control(self):
        """Test Asset Manager role-based access control"""
        print(f"\nüîí Testing Asset Manager Access Control")
        
        # Test Asset Manager accessing allocation endpoints
        endpoints_should_work = [
            ("asset-allocations", "GET"),
            ("pending-allocations", "GET"),
            ("allocated-assets", "GET"),
            ("asset-retrievals", "GET"),
            ("dashboard/asset-manager-stats", "GET")
        ]
        
        for endpoint, method in endpoints_should_work:
            success, response = self.run_test(
                f"Asset Manager {method} {endpoint}",
                method,
                endpoint,
                200,
                user_role="Asset Manager"
            )
            
            if success:
                print(f"   ‚úÖ Asset Manager can access {endpoint}")
        
        # Test other roles trying to access Asset Manager endpoints
        restricted_tests = [
            ("Employee", "asset-allocations", "GET", 403),
            ("Manager", "asset-allocations", "GET", 403),
            ("Employee", "asset-retrievals", "GET", 403),
            ("Manager", "asset-retrievals", "GET", 403),
            ("Employee", "dashboard/asset-manager-stats", "GET", 403),
            ("Manager", "dashboard/asset-manager-stats", "GET", 403)
        ]
        
        for role, endpoint, method, expected_status in restricted_tests:
            if role in self.tokens:
                success, response = self.run_test(
                    f"{role} {method} {endpoint} (Should Fail)",
                    method,
                    endpoint,
                    expected_status,
                    user_role=role
                )
                
                if success:
                    print(f"   ‚úÖ {role} correctly denied access to {endpoint}")

    def test_asset_manager_workflow(self):
        """Test complete Asset Manager workflow"""
        print(f"\nüîÑ Testing Complete Asset Manager Workflow")
        
        # This test requires the full workflow to be set up
        # 1. Asset type and definition should exist
        # 2. Requisition should be created and approved
        # 3. Asset Manager allocates asset
        # 4. Asset Manager processes retrieval
        
        workflow_success = True
        
        # Check if we have the necessary test data
        required_data = ['asset_type_id', 'asset_def_id', 'requisition_id']
        missing_data = [key for key in required_data if key not in self.test_data]
        
        if missing_data:
            print(f"   ‚ö†Ô∏è Missing test data for workflow: {missing_data}")
            workflow_success = False
        
        # Test Asset Manager dashboard stats
        if not self.test_asset_manager_dashboard_stats():
            workflow_success = False
        
        # Test Asset Allocations
        if not self.test_asset_allocations():
            workflow_success = False
        
        # Test Asset Retrievals
        if not self.test_asset_retrievals():
            workflow_success = False
        
        # Test Access Control
        self.test_asset_manager_access_control()
        
        if workflow_success:
            print("   ‚úÖ Asset Manager workflow completed successfully")
        else:
            print("   ‚ö†Ô∏è Asset Manager workflow had some issues")
        
        return workflow_success

    def test_asset_requisition_withdrawal(self):
        """Test Enhanced Asset Requisition Withdrawal/Delete functionality"""
        print(f"\nüóëÔ∏è Testing Asset Requisition Withdrawal/Delete Functionality")
        
        if 'asset_type_id' not in self.test_data:
            print("‚ùå Skipping Withdrawal tests - no asset type created")
            return False
        
        # Test 1: Create multiple requisitions for withdrawal testing
        from datetime import datetime, timedelta
        required_by_date = (datetime.now() + timedelta(days=7)).isoformat()
        
        # Create requisition by Employee for withdrawal test
        employee_requisition_data = {
            "asset_type_id": self.test_data['asset_type_id'],
            "request_type": "New Allocation",
            "request_for": "Self",
            "justification": "Test requisition for withdrawal testing",
            "required_by_date": required_by_date
        }
        
        success, response = self.run_test(
            "Create Employee Requisition for Withdrawal Test",
            "POST",
            "asset-requisitions",
            200,
            data=employee_requisition_data,
            user_role="Employee"
        )
        
        if success:
            employee_requisition_id = response['id']
            self.test_data['employee_withdrawal_req_id'] = employee_requisition_id
            print(f"   Created employee requisition ID: {employee_requisition_id[:8]}...")
        else:
            print("‚ùå Failed to create employee requisition for withdrawal test")
            return False
        
        # Create another requisition by Manager for cross-user testing
        manager_requisition_data = {
            "asset_type_id": self.test_data['asset_type_id'],
            "request_type": "New Allocation",
            "request_for": "Self",
            "justification": "Manager test requisition for withdrawal testing",
            "required_by_date": required_by_date
        }
        
        success, response = self.run_test(
            "Create Manager Requisition for Cross-User Test",
            "POST",
            "asset-requisitions",
            200,
            data=manager_requisition_data,
            user_role="Manager"
        )
        
        if success:
            manager_requisition_id = response['id']
            self.test_data['manager_withdrawal_req_id'] = manager_requisition_id
            print(f"   Created manager requisition ID: {manager_requisition_id[:8]}...")
        
        # Test 2: Employee withdraws their own pending request (should succeed)
        success, response = self.run_test(
            "Employee Withdraw Own Pending Request",
            "DELETE",
            f"asset-requisitions/{employee_requisition_id}",
            200,
            user_role="Employee"
        )
        
        if success:
            print("   ‚úÖ Employee successfully withdrew their own pending request")
        else:
            print("   ‚ùå Employee failed to withdraw their own pending request")
        
        # Test 3: Employee tries to withdraw another user's request (should fail)
        if 'manager_withdrawal_req_id' in self.test_data:
            success, response = self.run_test(
                "Employee Withdraw Other User's Request (Should Fail)",
                "DELETE",
                f"asset-requisitions/{self.test_data['manager_withdrawal_req_id']}",
                403,
                user_role="Employee"
            )
            
            if success:
                print("   ‚úÖ Employee correctly denied access to withdraw other user's request")
        
        # Test 4: Administrator can delete any pending request
        if 'manager_withdrawal_req_id' in self.test_data:
            success, response = self.run_test(
                "Administrator Delete Any Pending Request",
                "DELETE",
                f"asset-requisitions/{self.test_data['manager_withdrawal_req_id']}",
                200,
                user_role="Administrator"
            )
            
            if success:
                print("   ‚úÖ Administrator successfully deleted any pending request")
        
        # Test 5: HR Manager can delete any pending request
        # Create another requisition for HR Manager test
        hr_test_requisition_data = {
            "asset_type_id": self.test_data['asset_type_id'],
            "request_type": "New Allocation",
            "request_for": "Self",
            "justification": "HR Manager test requisition for deletion",
            "required_by_date": required_by_date
        }
        
        success, response = self.run_test(
            "Create Requisition for HR Manager Delete Test",
            "POST",
            "asset-requisitions",
            200,
            data=hr_test_requisition_data,
            user_role="Employee"
        )
        
        if success and "HR Manager" in self.tokens:
            hr_test_req_id = response['id']
            success, response = self.run_test(
                "HR Manager Delete Any Pending Request",
                "DELETE",
                f"asset-requisitions/{hr_test_req_id}",
                200,
                user_role="HR Manager"
            )
            
            if success:
                print("   ‚úÖ HR Manager successfully deleted any pending request")
        
        # Test 6: Try to withdraw non-existent requisition (should fail)
        success, response = self.run_test(
            "Withdraw Non-existent Requisition (Should Fail)",
            "DELETE",
            "asset-requisitions/non-existent-id",
            404,
            user_role="Employee"
        )
        
        if success:
            print("   ‚úÖ Correctly returned 404 for non-existent requisition")
        
        # Test 7: Create and approve a requisition, then try to withdraw (should fail)
        processed_req_data = {
            "asset_type_id": self.test_data['asset_type_id'],
            "request_type": "New Allocation",
            "request_for": "Self",
            "justification": "Test requisition for processed status test",
            "required_by_date": required_by_date
        }
        
        success, response = self.run_test(
            "Create Requisition for Processed Status Test",
            "POST",
            "asset-requisitions",
            200,
            data=processed_req_data,
            user_role="Employee"
        )
        
        if success:
            processed_req_id = response['id']
            
            # Manually update the requisition status to simulate approval
            # Note: This would normally be done through approval workflow
            # For testing purposes, we'll try to withdraw it as-is and expect it to work
            # since it's still pending, then we'll test the validation message
            
            success, response = self.run_test(
                "Try to Withdraw Pending Request (Should Work)",
                "DELETE",
                f"asset-requisitions/{processed_req_id}",
                200,
                user_role="Employee"
            )
            
            if success:
                print("   ‚úÖ Pending request withdrawal works correctly")
        
        return True

    def test_multi_role_withdrawal_access(self):
        """Test multi-role access control for withdrawal functionality"""
        print(f"\nüé≠ Testing Multi-Role Withdrawal Access Control")
        
        if 'asset_type_id' not in self.test_data:
            print("‚ùå Skipping Multi-Role Withdrawal tests - no asset type created")
            return False
        
        # Create test requisition for multi-role testing
        from datetime import datetime, timedelta
        required_by_date = (datetime.now() + timedelta(days=7)).isoformat()
        
        multi_role_req_data = {
            "asset_type_id": self.test_data['asset_type_id'],
            "request_type": "New Allocation",
            "request_for": "Self",
            "justification": "Multi-role access control test requisition",
            "required_by_date": required_by_date
        }
        
        success, response = self.run_test(
            "Create Requisition for Multi-Role Test",
            "POST",
            "asset-requisitions",
            200,
            data=multi_role_req_data,
            user_role="Employee"
        )
        
        if not success:
            print("‚ùå Failed to create requisition for multi-role test")
            return False
        
        multi_role_req_id = response['id']
        print(f"   Created multi-role test requisition ID: {multi_role_req_id[:8]}...")
        
        # Test that different roles can access the withdrawal endpoint appropriately
        # Employee should be able to withdraw their own request
        success, response = self.run_test(
            "Multi-Role: Employee Withdraw Own Request",
            "DELETE",
            f"asset-requisitions/{multi_role_req_id}",
            200,
            user_role="Employee"
        )
        
        if success:
            print("   ‚úÖ Multi-role system: Employee can withdraw own request")
        
        # Create another requisition for Administrator test
        admin_test_req_data = {
            "asset_type_id": self.test_data['asset_type_id'],
            "request_type": "New Allocation",
            "request_for": "Self",
            "justification": "Administrator multi-role test requisition",
            "required_by_date": required_by_date
        }
        
        success, response = self.run_test(
            "Create Requisition for Administrator Multi-Role Test",
            "POST",
            "asset-requisitions",
            200,
            data=admin_test_req_data,
            user_role="Manager"
        )
        
        if success:
            admin_test_req_id = response['id']
            
            # Test Administrator can delete any request (multi-role compatibility)
            success, response = self.run_test(
                "Multi-Role: Administrator Delete Any Request",
                "DELETE",
                f"asset-requisitions/{admin_test_req_id}",
                200,
                user_role="Administrator"
            )
            
            if success:
                print("   ‚úÖ Multi-role system: Administrator can delete any request")
        
        return True

    def test_requisition_data_integrity(self):
        """Test data integrity after withdrawal operations"""
        print(f"\nüîç Testing Requisition Data Integrity After Withdrawal")
        
        if 'asset_type_id' not in self.test_data:
            print("‚ùå Skipping Data Integrity tests - no asset type created")
            return False
        
        # Get initial count of requisitions
        success, initial_response = self.run_test(
            "Get Initial Requisitions Count",
            "GET",
            "asset-requisitions",
            200,
            user_role="Administrator"
        )
        
        if not success:
            print("‚ùå Failed to get initial requisitions count")
            return False
        
        initial_count = len(initial_response)
        print(f"   Initial requisitions count: {initial_count}")
        
        # Create test requisition for data integrity test
        from datetime import datetime, timedelta
        required_by_date = (datetime.now() + timedelta(days=7)).isoformat()
        
        integrity_req_data = {
            "asset_type_id": self.test_data['asset_type_id'],
            "request_type": "New Allocation",
            "request_for": "Self",
            "justification": "Data integrity test requisition",
            "required_by_date": required_by_date
        }
        
        success, response = self.run_test(
            "Create Requisition for Data Integrity Test",
            "POST",
            "asset-requisitions",
            200,
            data=integrity_req_data,
            user_role="Employee"
        )
        
        if not success:
            print("‚ùå Failed to create requisition for data integrity test")
            return False
        
        integrity_req_id = response['id']
        print(f"   Created integrity test requisition ID: {integrity_req_id[:8]}...")
        
        # Verify requisition was created (count should increase by 1)
        success, after_create_response = self.run_test(
            "Verify Requisition Created",
            "GET",
            "asset-requisitions",
            200,
            user_role="Administrator"
        )
        
        if success:
            after_create_count = len(after_create_response)
            if after_create_count == initial_count + 1:
                print("   ‚úÖ Requisition creation verified - count increased correctly")
            else:
                print(f"   ‚ö†Ô∏è Unexpected count after creation: {after_create_count} (expected {initial_count + 1})")
        
        # Withdraw the requisition
        success, response = self.run_test(
            "Withdraw Requisition for Data Integrity Test",
            "DELETE",
            f"asset-requisitions/{integrity_req_id}",
            200,
            user_role="Employee"
        )
        
        if not success:
            print("‚ùå Failed to withdraw requisition for data integrity test")
            return False
        
        print("   ‚úÖ Requisition withdrawn successfully")
        
        # Verify requisition was properly removed (count should return to initial)
        success, after_delete_response = self.run_test(
            "Verify Requisition Removed",
            "GET",
            "asset-requisitions",
            200,
            user_role="Administrator"
        )
        
        if success:
            after_delete_count = len(after_delete_response)
            if after_delete_count == initial_count:
                print("   ‚úÖ Data integrity verified - requisition properly removed from database")
            else:
                print(f"   ‚ùå Data integrity issue: count after deletion is {after_delete_count} (expected {initial_count})")
        
        # Verify withdrawn requisition cannot be accessed
        success, response = self.run_test(
            "Try to Access Withdrawn Requisition (Should Fail)",
            "GET",
            f"asset-requisitions",  # We'll check if the withdrawn ID is in the list
            200,
            user_role="Administrator"
        )
        
        if success:
            withdrawn_req_found = any(req['id'] == integrity_req_id for req in response)
            if not withdrawn_req_found:
                print("   ‚úÖ Withdrawn requisition not found in requisitions list - proper cleanup")
            else:
                print("   ‚ùå Withdrawn requisition still found in requisitions list - cleanup issue")
        
        # Verify that withdrawal doesn't affect other user's requisitions
        success, all_reqs_response = self.run_test(
            "Verify Other Requisitions Unaffected",
            "GET",
            "asset-requisitions",
            200,
            user_role="Administrator"
        )
        
        if success:
            # Check that we still have requisitions from other tests
            other_user_reqs = [req for req in all_reqs_response if req['requested_by'] != self.users.get('Employee', {}).get('id')]
            if other_user_reqs:
                print(f"   ‚úÖ Other users' requisitions unaffected - found {len(other_user_reqs)} requisitions from other users")
            else:
                print("   ‚ÑπÔ∏è No other users' requisitions found for comparison")
        
        return True

    def test_role_based_requisition_access_multi_role(self):
        """Test role-based requisition access with multi-role system"""
        print(f"\nüîê Testing Role-Based Requisition Access with Multi-Role System")
        
        # Test that get_asset_requisitions works correctly with multi-role users
        test_roles = ["Employee", "Manager", "HR Manager", "Administrator"]
        
        for role in test_roles:
            if role in self.tokens:
                success, response = self.run_test(
                    f"Multi-Role: Get Requisitions as {role}",
                    "GET",
                    "asset-requisitions",
                    200,
                    user_role=role
                )
                
                if success:
                    print(f"   ‚úÖ {role} can access requisitions - found {len(response)} requisitions")
                    
                    # Verify role-based filtering is working
                    if role == "Employee":
                        # Employee should only see their own requisitions
                        employee_id = self.users.get('Employee', {}).get('id')
                        if employee_id:
                            own_reqs = [req for req in response if req['requested_by'] == employee_id]
                            other_reqs = [req for req in response if req['requested_by'] != employee_id]
                            if len(other_reqs) == 0:
                                print(f"     ‚úÖ Employee correctly sees only own requisitions ({len(own_reqs)} found)")
                            else:
                                print(f"     ‚ö†Ô∏è Employee sees other users' requisitions ({len(other_reqs)} found)")
                    
                    elif role in ["Administrator", "HR Manager"]:
                        # Admin and HR should see all requisitions
                        if len(response) > 0:
                            print(f"     ‚úÖ {role} can see all requisitions as expected")
                    
                    elif role == "Manager":
                        # Manager should see pending requisitions and their own
                        pending_reqs = [req for req in response if req['status'] == 'Pending']
                        print(f"     ‚úÖ Manager can see requisitions including {len(pending_reqs)} pending ones")
        
        return True

    def test_dashboard_stats_multi_role(self):
        """Test dashboard stats with multi-role users"""
        print(f"\nüìä Testing Dashboard Stats with Multi-Role Users")
        
        # Test dashboard stats for different roles to ensure multi-role compatibility
        test_roles = ["Employee", "Manager", "HR Manager", "Administrator", "Asset Manager"]
        
        for role in test_roles:
            if role in self.tokens:
                success, response = self.run_test(
                    f"Multi-Role Dashboard Stats: {role}",
                    "GET",
                    "dashboard/stats",
                    200,
                    user_role=role
                )
                
                if success:
                    print(f"   ‚úÖ {role} dashboard stats working - keys: {list(response.keys())}")
                    
                    # Verify role-specific stats are present
                    if role in ["Administrator", "HR Manager"]:
                        if "pending_requisitions" in response:
                            print(f"     ‚úÖ {role} sees pending_requisitions: {response['pending_requisitions']}")
                        else:
                            print(f"     ‚ö†Ô∏è {role} missing pending_requisitions stat")
                    
                    if role == "Manager":
                        if "pending_approvals" in response:
                            print(f"     ‚úÖ Manager sees pending_approvals: {response['pending_approvals']}")
                        else:
                            print(f"     ‚ö†Ô∏è Manager missing pending_approvals stat")
                    
                    if role == "Employee":
                        employee_stats = ["my_requisitions", "my_allocated_assets"]
                        missing_stats = [stat for stat in employee_stats if stat not in response]
                        if not missing_stats:
                            print(f"     ‚úÖ Employee sees all expected stats: my_requisitions={response.get('my_requisitions', 0)}, my_allocated_assets={response.get('my_allocated_assets', 0)}")
                        else:
                            print(f"     ‚ö†Ô∏è Employee missing stats: {missing_stats}")
        
        return True

    def test_asset_type_manager_assignment(self):
        """Test Asset Type Manager Assignment feature"""
        print(f"\nüë®‚Äçüíº Testing Asset Type Manager Assignment Feature")
        
        # Test 1: Get Asset Managers Endpoint
        print("\n--- 1. Asset Managers Endpoint Testing ---")
        success, response = self.run_test(
            "Get Asset Managers",
            "GET",
            "users/asset-managers",
            200,
            user_role="Administrator"
        )
        
        asset_managers = []
        if success:
            asset_managers = response
            print(f"   ‚úÖ Found {len(asset_managers)} Asset Managers")
            for manager in asset_managers:
                print(f"     - {manager.get('name', 'Unknown')} ({manager.get('email', 'Unknown')})")
                print(f"       ID: {manager.get('id', 'Unknown')}")
                print(f"       Roles: {manager.get('roles', [])}")
        else:
            print("   ‚ùå Failed to get Asset Managers")
            return False
        
        # Test 2: Create Asset Type without Asset Manager Assignment
        print("\n--- 2. Asset Type Creation without Asset Manager ---")
        asset_type_no_manager = {
            "code": "TESTAM01",
            "name": "Test Asset Type No Manager",
            "depreciation_applicable": True,
            "asset_life": 3,
            "to_be_recovered_on_separation": True,
            "status": "Active",
            "assigned_asset_manager_id": None
        }
        
        success, response = self.run_test(
            "Create Asset Type without Asset Manager",
            "POST",
            "asset-types",
            200,
            data=asset_type_no_manager,
            user_role="Administrator"
        )
        
        if success:
            self.test_data['asset_type_no_manager_id'] = response['id']
            print(f"   ‚úÖ Created asset type without manager: {response['id']}")
            print(f"   Assigned Asset Manager ID: {response.get('assigned_asset_manager_id', 'None')}")
            print(f"   Assigned Asset Manager Name: {response.get('assigned_asset_manager_name', 'None')}")
        else:
            print("   ‚ùå Failed to create asset type without manager")
        
        # Test 3: Create Asset Type with valid Asset Manager Assignment
        print("\n--- 3. Asset Type Creation with Asset Manager Assignment ---")
        if asset_managers:
            selected_manager = asset_managers[0]  # Use first available Asset Manager
            asset_type_with_manager = {
                "code": "TESTAM02",
                "name": "Test Asset Type With Manager",
                "depreciation_applicable": True,
                "asset_life": 5,
                "to_be_recovered_on_separation": True,
                "status": "Active",
                "assigned_asset_manager_id": selected_manager['id']
            }
            
            success, response = self.run_test(
                "Create Asset Type with Asset Manager",
                "POST",
                "asset-types",
                200,
                data=asset_type_with_manager,
                user_role="Administrator"
            )
            
            if success:
                self.test_data['asset_type_with_manager_id'] = response['id']
                print(f"   ‚úÖ Created asset type with manager: {response['id']}")
                print(f"   Assigned Asset Manager ID: {response.get('assigned_asset_manager_id', 'None')}")
                print(f"   Assigned Asset Manager Name: {response.get('assigned_asset_manager_name', 'None')}")
                
                # Verify the manager name was populated correctly
                if response.get('assigned_asset_manager_name') == selected_manager['name']:
                    print("   ‚úÖ Asset Manager name populated correctly")
                else:
                    print(f"   ‚ùå Asset Manager name mismatch: expected {selected_manager['name']}, got {response.get('assigned_asset_manager_name')}")
            else:
                print("   ‚ùå Failed to create asset type with manager")
        else:
            print("   ‚ö†Ô∏è No Asset Managers available for assignment test")
        
        # Test 4: Create Asset Type with invalid Asset Manager ID (should fail)
        print("\n--- 4. Asset Type Creation with Invalid Asset Manager ---")
        asset_type_invalid_manager = {
            "code": "TESTAM03",
            "name": "Test Asset Type Invalid Manager",
            "depreciation_applicable": False,
            "status": "Active",
            "assigned_asset_manager_id": "invalid-manager-id"
        }
        
        success, response = self.run_test(
            "Create Asset Type with Invalid Asset Manager (Should Fail)",
            "POST",
            "asset-types",
            400,
            data=asset_type_invalid_manager,
            user_role="Administrator"
        )
        
        if success:
            print("   ‚úÖ Invalid Asset Manager ID correctly rejected")
        else:
            print("   ‚ùå Invalid Asset Manager ID was not rejected")
        
        # Test 5: Create Asset Type with non-Asset Manager user (should fail)
        print("\n--- 5. Asset Type Creation with Non-Asset Manager User ---")
        # Get a non-Asset Manager user (Employee)
        success, users_response = self.run_test(
            "Get Users for Non-Asset Manager Test",
            "GET",
            "users",
            200,
            user_role="Administrator"
        )
        
        non_asset_manager = None
        if success:
            for user in users_response:
                user_roles = user.get('roles', [])
                if 'Asset Manager' not in user_roles and 'Employee' in user_roles:
                    non_asset_manager = user
                    break
        
        if non_asset_manager:
            asset_type_non_manager = {
                "code": "TESTAM04",
                "name": "Test Asset Type Non Manager",
                "depreciation_applicable": False,
                "status": "Active",
                "assigned_asset_manager_id": non_asset_manager['id']
            }
            
            success, response = self.run_test(
                "Create Asset Type with Non-Asset Manager (Should Fail)",
                "POST",
                "asset-types",
                400,
                data=asset_type_non_manager,
                user_role="Administrator"
            )
            
            if success:
                print("   ‚úÖ Non-Asset Manager user correctly rejected")
            else:
                print("   ‚ùå Non-Asset Manager user was not rejected")
        else:
            print("   ‚ö†Ô∏è No non-Asset Manager user found for validation test")
        
        # Test 6: Update Asset Type to assign Asset Manager
        print("\n--- 6. Asset Type Update - Assign Asset Manager ---")
        if 'asset_type_no_manager_id' in self.test_data and asset_managers:
            selected_manager = asset_managers[0]
            update_assign_manager = {
                "assigned_asset_manager_id": selected_manager['id']
            }
            
            success, response = self.run_test(
                "Update Asset Type - Assign Manager",
                "PUT",
                f"asset-types/{self.test_data['asset_type_no_manager_id']}",
                200,
                data=update_assign_manager,
                user_role="Administrator"
            )
            
            if success:
                print(f"   ‚úÖ Asset Manager assigned via update")
                print(f"   Assigned Asset Manager ID: {response.get('assigned_asset_manager_id', 'None')}")
                print(f"   Assigned Asset Manager Name: {response.get('assigned_asset_manager_name', 'None')}")
                
                # Verify the manager name was populated correctly
                if response.get('assigned_asset_manager_name') == selected_manager['name']:
                    print("   ‚úÖ Asset Manager name populated correctly on update")
                else:
                    print(f"   ‚ùå Asset Manager name mismatch on update")
            else:
                print("   ‚ùå Failed to assign Asset Manager via update")
        
        # Test 7: Update Asset Type to unassign Asset Manager
        print("\n--- 7. Asset Type Update - Unassign Asset Manager ---")
        if 'asset_type_with_manager_id' in self.test_data:
            update_unassign_manager = {
                "assigned_asset_manager_id": None
            }
            
            success, response = self.run_test(
                "Update Asset Type - Unassign Manager",
                "PUT",
                f"asset-types/{self.test_data['asset_type_with_manager_id']}",
                200,
                data=update_unassign_manager,
                user_role="Administrator"
            )
            
            if success:
                print(f"   ‚úÖ Asset Manager unassigned via update")
                print(f"   Assigned Asset Manager ID: {response.get('assigned_asset_manager_id', 'None')}")
                print(f"   Assigned Asset Manager Name: {response.get('assigned_asset_manager_name', 'None')}")
                
                # Verify both ID and name are cleared
                if response.get('assigned_asset_manager_id') is None and response.get('assigned_asset_manager_name') is None:
                    print("   ‚úÖ Asset Manager assignment properly cleared")
                else:
                    print("   ‚ùå Asset Manager assignment not properly cleared")
            else:
                print("   ‚ùå Failed to unassign Asset Manager via update")
        
        # Test 8: Update Asset Type with invalid Asset Manager (should fail)
        print("\n--- 8. Asset Type Update with Invalid Asset Manager ---")
        if 'asset_type_no_manager_id' in self.test_data:
            update_invalid_manager = {
                "assigned_asset_manager_id": "invalid-update-manager-id"
            }
            
            success, response = self.run_test(
                "Update Asset Type with Invalid Manager (Should Fail)",
                "PUT",
                f"asset-types/{self.test_data['asset_type_no_manager_id']}",
                400,
                data=update_invalid_manager,
                user_role="Administrator"
            )
            
            if success:
                print("   ‚úÖ Invalid Asset Manager ID correctly rejected on update")
            else:
                print("   ‚ùå Invalid Asset Manager ID was not rejected on update")
        
        # Test 9: Verify Asset Manager assignment persists in retrieval
        print("\n--- 9. Asset Manager Assignment Data Persistence ---")
        if 'asset_type_no_manager_id' in self.test_data:
            success, response = self.run_test(
                "Get Asset Type - Verify Manager Assignment",
                "GET",
                f"asset-types/{self.test_data['asset_type_no_manager_id']}",
                200,
                user_role="Administrator"
            )
            
            if success:
                print(f"   ‚úÖ Asset type retrieved successfully")
                print(f"   Assigned Asset Manager ID: {response.get('assigned_asset_manager_id', 'None')}")
                print(f"   Assigned Asset Manager Name: {response.get('assigned_asset_manager_name', 'None')}")
                
                # Check if assignment persisted from previous update
                if response.get('assigned_asset_manager_id') is not None:
                    print("   ‚úÖ Asset Manager assignment persisted correctly")
                else:
                    print("   ‚ö†Ô∏è Asset Manager assignment not persisted (may be expected if cleared)")
            else:
                print("   ‚ùå Failed to retrieve asset type for persistence check")
        
        # Test 10: Get all Asset Types and verify manager assignments are included
        print("\n--- 10. Asset Types List - Manager Assignment Display ---")
        success, response = self.run_test(
            "Get All Asset Types - Check Manager Assignments",
            "GET",
            "asset-types",
            200,
            user_role="Administrator"
        )
        
        if success:
            print(f"   ‚úÖ Retrieved {len(response)} asset types")
            manager_assigned_count = 0
            for asset_type in response:
                if asset_type.get('assigned_asset_manager_id'):
                    manager_assigned_count += 1
                    print(f"     - {asset_type.get('name', 'Unknown')} assigned to {asset_type.get('assigned_asset_manager_name', 'Unknown')}")
            
            print(f"   Asset types with managers assigned: {manager_assigned_count}")
            if manager_assigned_count > 0:
                print("   ‚úÖ Asset Manager assignments visible in list")
            else:
                print("   ‚ö†Ô∏è No Asset Manager assignments found in list")
        else:
            print("   ‚ùå Failed to retrieve asset types list")
        
        # Test 11: Access Control - HR Manager can assign Asset Managers
        print("\n--- 11. Access Control - HR Manager Asset Manager Assignment ---")
        if "HR Manager" in self.tokens and asset_managers:
            hr_asset_type = {
                "code": "TESTAM05",
                "name": "HR Manager Test Asset Type",
                "depreciation_applicable": False,
                "status": "Active",
                "assigned_asset_manager_id": asset_managers[0]['id']
            }
            
            success, response = self.run_test(
                "HR Manager Create Asset Type with Manager",
                "POST",
                "asset-types",
                200,
                data=hr_asset_type,
                user_role="HR Manager"
            )
            
            if success:
                print("   ‚úÖ HR Manager can assign Asset Managers")
                print(f"   Assigned Manager: {response.get('assigned_asset_manager_name', 'None')}")
            else:
                print("   ‚ùå HR Manager cannot assign Asset Managers")
        else:
            print("   ‚ö†Ô∏è HR Manager not available or no Asset Managers for access control test")
        
        # Test 12: Access Control - Employee cannot access Asset Managers endpoint
        print("\n--- 12. Access Control - Employee Asset Managers Access ---")
        success, response = self.run_test(
            "Employee Get Asset Managers (Should Fail)",
            "GET",
            "users/asset-managers",
            403,
            user_role="Employee"
        )
        
        if success:
            print("   ‚úÖ Employee correctly denied access to Asset Managers endpoint")
        else:
            print("   ‚ùå Employee was not denied access to Asset Managers endpoint")
        
        print("\n--- Asset Type Manager Assignment Testing Summary ---")
        print("‚úÖ Asset Type Manager Assignment feature testing completed")
        return True

    def test_sriram_password_update_and_login(self):
        """Test specific password update and login issue for user sriram@company.com"""
        print(f"\nüîê Testing Password Update and Login for sriram@company.com")
        
        # Test 1: Check if user sriram@company.com exists in database
        print("\n--- 1. User Database State Verification ---")
        success, users_response = self.run_test(
            "Get All Users to Check sriram@company.com",
            "GET",
            "users",
            200,
            user_role="Administrator"
        )
        
        sriram_user = None
        if success:
            for user in users_response:
                if user.get('email') == 'sriram@company.com':
                    sriram_user = user
                    break
            
            if sriram_user:
                print(f"   ‚úÖ User sriram@company.com found in database")
                print(f"   User ID: {sriram_user.get('id', 'Unknown')}")
                print(f"   Name: {sriram_user.get('name', 'Unknown')}")
                print(f"   Roles: {sriram_user.get('roles', [])}")
                print(f"   Is Active: {sriram_user.get('is_active', False)}")
                print(f"   Has password_hash field: {'password_hash' in str(sriram_user)}")
                self.test_data['sriram_user_id'] = sriram_user['id']
            else:
                print("   ‚ùå User sriram@company.com NOT found in database")
                # Create the user for testing
                print("   Creating sriram@company.com for testing...")
                sriram_create_data = {
                    "email": "sriram@company.com",
                    "name": "Sriram Test User",
                    "roles": ["Employee"],
                    "designation": "Software Developer",
                    "password": "password123"
                }
                
                success, response = self.run_test(
                    "Create sriram@company.com User",
                    "POST",
                    "users",
                    200,
                    data=sriram_create_data,
                    user_role="Administrator"
                )
                
                if success:
                    self.test_data['sriram_user_id'] = response['id']
                    sriram_user = response
                    print(f"   ‚úÖ Created sriram@company.com with ID: {response['id']}")
                else:
                    print("   ‚ùå Failed to create sriram@company.com user")
                    return False
        
        # Test 2: Test initial login with password123
        print("\n--- 2. Initial Login Authentication Testing ---")
        initial_login_data = {
            "email": "sriram@company.com",
            "password": "password123"
        }
        
        success, response = self.run_test(
            "Initial Login sriram@company.com with password123",
            "POST",
            "auth/login",
            200,
            data=initial_login_data
        )
        
        if success:
            print("   ‚úÖ Initial login successful with password123")
            sriram_token = response.get('session_token')
            self.tokens['sriram'] = sriram_token
            self.users['sriram'] = response.get('user', {})
            print(f"   Session token obtained: {sriram_token[:20]}...")
        else:
            print("   ‚ùå Initial login failed with password123")
            return False
        
        # Test 3: Password Update via PUT /api/users/{user_id}
        print("\n--- 3. Password Update Verification ---")
        if 'sriram_user_id' not in self.test_data:
            print("   ‚ùå Cannot test password update - no user ID")
            return False
        
        new_password = "newpassword456"
        password_update_data = {
            "password": new_password
        }
        
        success, response = self.run_test(
            "Update sriram@company.com Password",
            "PUT",
            f"users/{self.test_data['sriram_user_id']}",
            200,
            data=password_update_data,
            user_role="Administrator"
        )
        
        if success:
            print("   ‚úÖ Password update API call successful")
            print(f"   Updated user name: {response.get('name', 'Unknown')}")
            print(f"   Updated user email: {response.get('email', 'Unknown')}")
        else:
            print("   ‚ùå Password update API call failed")
            return False
        
        # Test 4: Verify old password no longer works
        print("\n--- 4. Old Password Verification (Should Fail) ---")
        old_password_login = {
            "email": "sriram@company.com",
            "password": "password123"
        }
        
        success, response = self.run_test(
            "Login with Old Password (Should Fail)",
            "POST",
            "auth/login",
            401,  # Expecting authentication failure
            data=old_password_login
        )
        
        if success:
            print("   ‚úÖ Old password correctly rejected")
        else:
            print("   ‚ùå Old password still works (this is a problem)")
        
        # Test 5: Login with new password
        print("\n--- 5. New Password Login Authentication ---")
        new_password_login = {
            "email": "sriram@company.com",
            "password": new_password
        }
        
        success, response = self.run_test(
            "Login with New Password",
            "POST",
            "auth/login",
            200,
            data=new_password_login
        )
        
        if success:
            print("   ‚úÖ New password login successful")
            new_token = response.get('session_token')
            print(f"   New session token: {new_token[:20]}...")
            
            # Verify user data
            user_data = response.get('user', {})
            print(f"   Logged in user: {user_data.get('name', 'Unknown')}")
            print(f"   User roles: {user_data.get('roles', [])}")
            print(f"   User active: {user_data.get('is_active', False)}")
        else:
            print("   ‚ùå New password login failed")
            return False
        
        # Test 6: Password Hashing Consistency Check
        print("\n--- 6. Password Hashing Consistency Verification ---")
        
        # Test multiple password updates to verify hashing consistency
        test_passwords = ["testpass1", "testpass2", "testpass3"]
        
        for i, test_pass in enumerate(test_passwords):
            print(f"   Testing password change {i+1}: {test_pass}")
            
            # Update password
            update_data = {"password": test_pass}
            success, response = self.run_test(
                f"Update Password to {test_pass}",
                "PUT",
                f"users/{self.test_data['sriram_user_id']}",
                200,
                data=update_data,
                user_role="Administrator"
            )
            
            if not success:
                print(f"   ‚ùå Failed to update password to {test_pass}")
                continue
            
            # Test login with new password
            login_data = {"email": "sriram@company.com", "password": test_pass}
            success, response = self.run_test(
                f"Login with {test_pass}",
                "POST",
                "auth/login",
                200,
                data=login_data
            )
            
            if success:
                print(f"   ‚úÖ Password {test_pass} - Update and login successful")
            else:
                print(f"   ‚ùå Password {test_pass} - Login failed after update")
        
        # Test 7: End-to-End Flow Testing
        print("\n--- 7. End-to-End Flow Testing ---")
        
        # Create a new test user for complete flow
        from datetime import datetime
        e2e_user_data = {
            "email": f"e2e_test_{datetime.now().strftime('%H%M%S')}@company.com",
            "name": "E2E Test User",
            "roles": ["Employee"],
            "password": "initialpass123"
        }
        
        success, response = self.run_test(
            "Create E2E Test User",
            "POST",
            "users",
            200,
            data=e2e_user_data,
            user_role="Administrator"
        )
        
        if success:
            e2e_user_id = response['id']
            e2e_email = response['email']
            print(f"   ‚úÖ Created E2E test user: {e2e_email}")
            
            # Test initial login
            initial_login = {"email": e2e_email, "password": "initialpass123"}
            success, response = self.run_test(
                "E2E Initial Login",
                "POST",
                "auth/login",
                200,
                data=initial_login
            )
            
            if success:
                print("   ‚úÖ E2E Initial login successful")
                
                # Update password
                new_pass = "updatedpass456"
                update_data = {"password": new_pass}
                success, response = self.run_test(
                    "E2E Password Update",
                    "PUT",
                    f"users/{e2e_user_id}",
                    200,
                    data=update_data,
                    user_role="Administrator"
                )
                
                if success:
                    print("   ‚úÖ E2E Password update successful")
                    
                    # Test old password fails
                    old_login = {"email": e2e_email, "password": "initialpass123"}
                    success, response = self.run_test(
                        "E2E Old Password (Should Fail)",
                        "POST",
                        "auth/login",
                        401,
                        data=old_login
                    )
                    
                    if success:
                        print("   ‚úÖ E2E Old password correctly rejected")
                    
                    # Test new password works
                    new_login = {"email": e2e_email, "password": new_pass}
                    success, response = self.run_test(
                        "E2E New Password Login",
                        "POST",
                        "auth/login",
                        200,
                        data=new_login
                    )
                    
                    if success:
                        print("   ‚úÖ E2E New password login successful")
                        print("   ‚úÖ Complete E2E flow working correctly")
                    else:
                        print("   ‚ùå E2E New password login failed")
                else:
                    print("   ‚ùå E2E Password update failed")
            else:
                print("   ‚ùå E2E Initial login failed")
        
        # Test 8: SHA256 Hashing Verification
        print("\n--- 8. SHA256 Hashing Verification ---")
        import hashlib
        
        test_password = "hashtest123"
        expected_hash = hashlib.sha256(test_password.encode()).hexdigest()
        print(f"   Expected SHA256 hash for '{test_password}': {expected_hash[:20]}...")
        
        # Update sriram's password to test password
        update_data = {"password": test_password}
        success, response = self.run_test(
            "Update to Hash Test Password",
            "PUT",
            f"users/{self.test_data['sriram_user_id']}",
            200,
            data=update_data,
            user_role="Administrator"
        )
        
        if success:
            # Try to login with the test password
            login_data = {"email": "sriram@company.com", "password": test_password}
            success, response = self.run_test(
                "Login with Hash Test Password",
                "POST",
                "auth/login",
                200,
                data=login_data
            )
            
            if success:
                print("   ‚úÖ SHA256 hashing appears to be working correctly")
            else:
                print("   ‚ùå SHA256 hashing may have issues")
        
        print("\n--- Password Update and Login Testing Summary ---")
        print("‚úÖ All password update and login tests completed")
        return True

    def test_email_notification_system(self):
        """Test Email Notification System - SMTP Configuration and Integration"""
        print(f"\nüìß Testing Email Notification System")
        
        # Test 1: Email Configuration API Testing
        print(f"\nüìã Testing Email Configuration API")
        
        # Test GET /api/email-config (should return 404 initially)
        success, response = self.run_test(
            "Get Email Configuration (Should be 404 initially)",
            "GET",
            "email-config",
            404,
            user_role="Administrator"
        )
        
        if success:
            print("   ‚úÖ No email configuration found initially (expected)")
        
        # Test POST /api/email-config - Create email configuration
        email_config_data = {
            "smtp_server": "smtp.gmail.com",
            "smtp_port": 587,
            "smtp_username": "test@company.com",
            "smtp_password": "test_password_123",
            "use_tls": True,
            "use_ssl": False,
            "from_email": "noreply@company.com",
            "from_name": "Asset Management System"
        }
        
        success, response = self.run_test(
            "Create Email Configuration",
            "POST",
            "email-config",
            200,
            data=email_config_data,
            user_role="Administrator"
        )
        
        if success:
            self.test_data['email_config_id'] = response['id']
            print(f"   Created email config with ID: {response['id']}")
            print(f"   SMTP Server: {response.get('smtp_server', 'Not set')}")
            print(f"   SMTP Port: {response.get('smtp_port', 'Not set')}")
            print(f"   From Email: {response.get('from_email', 'Not set')}")
        
        # Test GET /api/email-config - Retrieve active configuration
        success, response = self.run_test(
            "Get Active Email Configuration",
            "GET",
            "email-config",
            200,
            user_role="Administrator"
        )
        
        if success:
            print(f"   Retrieved config - Server: {response.get('smtp_server', 'Unknown')}")
            print(f"   Password masked: {response.get('smtp_password') == '***masked***'}")
        
        # Test PUT /api/email-config/{id} - Update email configuration
        if 'email_config_id' in self.test_data:
            update_data = {
                "smtp_server": "smtp.outlook.com",
                "smtp_port": 587,
                "from_name": "Updated Asset Management System"
            }
            
            success, response = self.run_test(
                "Update Email Configuration",
                "PUT",
                f"email-config/{self.test_data['email_config_id']}",
                200,
                data=update_data,
                user_role="Administrator"
            )
            
            if success:
                print(f"   Updated SMTP server: {response.get('smtp_server', 'Not updated')}")
                print(f"   Updated from name: {response.get('from_name', 'Not updated')}")
        
        # Test POST /api/email-config/test - Send test email (will fail without real SMTP)
        test_email_data = {
            "test_email": "admin@company.com"
        }
        
        success, response = self.run_test(
            "Send Test Email (Expected to fail without real SMTP)",
            "POST",
            "email-config/test",
            500,  # Expecting failure due to invalid SMTP
            data=test_email_data,
            user_role="Administrator"
        )
        
        if success:
            print("   ‚úÖ Test email endpoint correctly handled SMTP failure")
        
        # Test 2: Email Service Integration Testing
        print(f"\nüîß Testing Email Service Integration")
        
        # Test access control - Employee trying to access email config (should fail)
        success, response = self.run_test(
            "Employee Access Email Config (Should Fail)",
            "GET",
            "email-config",
            403,
            user_role="Employee"
        )
        
        if success:
            print("   ‚úÖ Employee correctly denied access to email configuration")
        
        # Test Manager trying to access email config (should fail)
        success, response = self.run_test(
            "Manager Access Email Config (Should Fail)",
            "GET",
            "email-config",
            403,
            user_role="Manager"
        )
        
        if success:
            print("   ‚úÖ Manager correctly denied access to email configuration")
        
        # Test HR Manager trying to access email config (should fail)
        if "HR Manager" in self.tokens:
            success, response = self.run_test(
                "HR Manager Access Email Config (Should Fail)",
                "GET",
                "email-config",
                403,
                user_role="HR Manager"
            )
            
            if success:
                print("   ‚úÖ HR Manager correctly denied access to email configuration")
        
        # Test 3: Email Trigger Integration Testing
        print(f"\nüéØ Testing Email Trigger Integration")
        
        # Create test data for email triggers if not exists
        if 'asset_type_id' not in self.test_data:
            print("   ‚ö†Ô∏è Creating asset type for email trigger testing...")
            asset_type_data = {
                "code": "EMAIL_TEST",
                "name": "Email Test Asset",
                "depreciation_applicable": False,
                "to_be_recovered_on_separation": True,
                "status": "Active"
            }
            
            success, response = self.run_test(
                "Create Asset Type for Email Testing",
                "POST",
                "asset-types",
                200,
                data=asset_type_data,
                user_role="Administrator"
            )
            
            if success:
                self.test_data['email_test_asset_type_id'] = response['id']
        
        # Test Trigger 1: Asset requisition creation
        if 'email_test_asset_type_id' in self.test_data or 'asset_type_id' in self.test_data:
            asset_type_id = self.test_data.get('email_test_asset_type_id', self.test_data.get('asset_type_id'))
            
            from datetime import datetime, timedelta
            required_by_date = (datetime.now() + timedelta(days=7)).isoformat()
            
            requisition_data = {
                "asset_type_id": asset_type_id,
                "request_type": "New Allocation",
                "request_for": "Self",
                "justification": "Email notification test - asset request",
                "required_by_date": required_by_date
            }
            
            success, response = self.run_test(
                "Create Asset Requisition (Email Trigger 1)",
                "POST",
                "asset-requisitions",
                200,
                data=requisition_data,
                user_role="Employee"
            )
            
            if success:
                self.test_data['email_test_requisition_id'] = response['id']
                print(f"   ‚úÖ Asset requisition created - email notification should be triggered")
                print(f"   Requisition ID: {response['id'][:8]}...")
        
        # Test Trigger 2: Manager approval action
        if 'email_test_requisition_id' in self.test_data:
            approval_data = {
                "action": "approve",
                "reason": "Email notification test - manager approval"
            }
            
            success, response = self.run_test(
                "Manager Approve Requisition (Email Trigger 2)",
                "POST",
                f"asset-requisitions/{self.test_data['email_test_requisition_id']}/manager-action",
                200,
                data=approval_data,
                user_role="Administrator"  # Using admin as they can approve any request
            )
            
            if success:
                print(f"   ‚úÖ Manager approval completed - email notification should be triggered")
        
        # Test Trigger 3: Manager rejection action
        # Create another requisition for rejection test
        if 'email_test_asset_type_id' in self.test_data or 'asset_type_id' in self.test_data:
            asset_type_id = self.test_data.get('email_test_asset_type_id', self.test_data.get('asset_type_id'))
            
            rejection_req_data = {
                "asset_type_id": asset_type_id,
                "request_type": "New Allocation",
                "request_for": "Self",
                "justification": "Email notification test - rejection scenario",
                "required_by_date": required_by_date
            }
            
            success, response = self.run_test(
                "Create Requisition for Rejection Test",
                "POST",
                "asset-requisitions",
                200,
                data=rejection_req_data,
                user_role="Employee"
            )
            
            if success:
                rejection_req_id = response['id']
                
                rejection_data = {
                    "action": "reject",
                    "reason": "Email notification test - manager rejection"
                }
                
                success, response = self.run_test(
                    "Manager Reject Requisition (Email Trigger 3)",
                    "POST",
                    f"asset-requisitions/{rejection_req_id}/manager-action",
                    200,
                    data=rejection_data,
                    user_role="Administrator"
                )
                
                if success:
                    print(f"   ‚úÖ Manager rejection completed - email notification should be triggered")
        
        # Test 4: Data Validation Testing
        print(f"\n‚úÖ Testing Email Configuration Validation")
        
        # Test invalid SMTP configuration
        invalid_config_data = {
            "smtp_server": "",  # Empty server
            "smtp_port": 587,
            "smtp_username": "test@company.com",
            "smtp_password": "test_password",
            "from_email": "invalid-email",  # Invalid email format
            "from_name": "Test System"
        }
        
        success, response = self.run_test(
            "Create Invalid Email Configuration (Should Fail)",
            "POST",
            "email-config",
            422,  # Expecting validation error
            data=invalid_config_data,
            user_role="Administrator"
        )
        
        if success:
            print("   ‚úÖ Invalid email configuration correctly rejected")
        
        # Test invalid port number
        invalid_port_config = {
            "smtp_server": "smtp.gmail.com",
            "smtp_port": 99999,  # Invalid port
            "smtp_username": "test@company.com",
            "smtp_password": "test_password",
            "from_email": "test@company.com",
            "from_name": "Test System"
        }
        
        success, response = self.run_test(
            "Create Config with Invalid Port",
            "POST",
            "email-config",
            200,  # This might pass validation but fail on actual use
            data=invalid_port_config,
            user_role="Administrator"
        )
        
        # Test 5: Error Handling Testing
        print(f"\nüö® Testing Email Error Handling")
        
        # Test updating non-existent email configuration
        success, response = self.run_test(
            "Update Non-existent Email Config (Should Fail)",
            "PUT",
            "email-config/non-existent-id",
            404,
            data={"smtp_server": "test.com"},
            user_role="Administrator"
        )
        
        if success:
            print("   ‚úÖ Non-existent email config update correctly rejected")
        
        # Test sending test email to invalid email
        invalid_test_email = {
            "test_email": "invalid-email-format"
        }
        
        success, response = self.run_test(
            "Send Test Email to Invalid Address (Should Fail)",
            "POST",
            "email-config/test",
            422,  # Expecting validation error
            data=invalid_test_email,
            user_role="Administrator"
        )
        
        if success:
            print("   ‚úÖ Invalid test email address correctly rejected")
        
        # Test 6: Email Template Context Testing
        print(f"\nüìù Testing Email Template Context")
        
        # Create asset definition for allocation testing
        if ('email_test_asset_type_id' in self.test_data or 'asset_type_id' in self.test_data) and 'asset_def_id' not in self.test_data:
            asset_type_id = self.test_data.get('email_test_asset_type_id', self.test_data.get('asset_type_id'))
            
            asset_def_data = {
                "asset_type_id": asset_type_id,
                "asset_code": "EMAIL_TEST_001",
                "asset_description": "Email Test Asset",
                "asset_details": "Asset for email notification testing",
                "asset_value": 25000.0,
                "status": "Available"
            }
            
            success, response = self.run_test(
                "Create Asset Definition for Email Testing",
                "POST",
                "asset-definitions",
                200,
                data=asset_def_data,
                user_role="Administrator"
            )
            
            if success:
                self.test_data['email_test_asset_def_id'] = response['id']
                print(f"   Created asset definition for email testing: {response['id'][:8]}...")
        
        # Test Trigger 4: Asset allocation (if we have approved requisition and asset)
        if 'email_test_requisition_id' in self.test_data and 'email_test_asset_def_id' in self.test_data:
            allocation_data = {
                "requisition_id": self.test_data['email_test_requisition_id'],
                "asset_definition_id": self.test_data['email_test_asset_def_id'],
                "remarks": "Email notification test - asset allocation"
            }
            
            success, response = self.run_test(
                "Create Asset Allocation (Email Trigger 4)",
                "POST",
                "asset-allocations",
                200,
                data=allocation_data,
                user_role="Asset Manager"
            )
            
            if success:
                print(f"   ‚úÖ Asset allocation completed - email notification should be triggered")
                self.test_data['email_test_allocation_id'] = response['id']
        
        # Test Trigger 5: Asset acknowledgment
        if 'email_test_asset_def_id' in self.test_data:
            acknowledgment_data = {
                "acknowledgment_notes": "Email notification test - asset acknowledgment"
            }
            
            # First check if asset is allocated to current user
            success, asset_response = self.run_test(
                "Get Asset for Acknowledgment Test",
                "GET",
                f"asset-definitions/{self.test_data['email_test_asset_def_id']}",
                200,
                user_role="Administrator"
            )
            
            if success and asset_response.get('status') == 'Allocated':
                success, response = self.run_test(
                    "Acknowledge Asset Allocation (Email Trigger 5)",
                    "POST",
                    f"asset-definitions/{self.test_data['email_test_asset_def_id']}/acknowledge",
                    200,
                    data=acknowledgment_data,
                    user_role="Employee"
                )
                
                if success:
                    print(f"   ‚úÖ Asset acknowledgment completed - email notification should be triggered")
                else:
                    print(f"   ‚ö†Ô∏è Asset acknowledgment failed - may not be allocated to current user")
            else:
                print(f"   ‚ö†Ô∏è Asset not allocated, skipping acknowledgment test")
        
        # Test 7: Email Service Method Testing
        print(f"\nüîç Testing Email Service Methods")
        
        # Test that email service handles missing configuration gracefully
        # This is tested implicitly through the API calls above
        
        # Test multiple email configurations (only one should be active)
        second_config_data = {
            "smtp_server": "smtp.yahoo.com",
            "smtp_port": 587,
            "smtp_username": "test2@company.com",
            "smtp_password": "test_password_456",
            "from_email": "noreply2@company.com",
            "from_name": "Asset Management System 2"
        }
        
        success, response = self.run_test(
            "Create Second Email Configuration",
            "POST",
            "email-config",
            200,
            data=second_config_data,
            user_role="Administrator"
        )
        
        if success:
            print(f"   ‚úÖ Second email configuration created")
            
            # Verify only the new one is active
            success, active_config = self.run_test(
                "Verify Only One Active Configuration",
                "GET",
                "email-config",
                200,
                user_role="Administrator"
            )
            
            if success:
                if active_config.get('smtp_server') == 'smtp.yahoo.com':
                    print(f"   ‚úÖ Only latest configuration is active")
                else:
                    print(f"   ‚ö†Ô∏è Unexpected active configuration")
        
        print(f"\nüìß Email Notification System Testing Summary:")
        print(f"   ‚úÖ Email Configuration API endpoints tested")
        print(f"   ‚úÖ SMTP configuration validation tested")
        print(f"   ‚úÖ Email service integration tested")
        print(f"   ‚úÖ Email triggers in workflows tested")
        print(f"   ‚úÖ Access control for email features tested")
        print(f"   ‚úÖ Error handling scenarios tested")
        print(f"   ‚ö†Ô∏è Note: Actual email sending requires valid SMTP server")
        
        return True

    def test_location_management_api(self):
        """Test Location Management API Testing"""
        print(f"\nüåç Testing Location Management API")
        
        # Test 1: Create new locations with Code, Name, Country, Status
        location_data_nyc = {
            "code": "NYC",
            "name": "NYC Office",
            "country": "United States",
            "status": "Active"
        }
        
        success, response = self.run_test(
            "Create NYC Office Location",
            "POST",
            "locations",
            200,
            data=location_data_nyc,
            user_role="Administrator"
        )
        
        if success:
            self.test_data['nyc_location_id'] = response['id']
            print(f"   Created NYC location with ID: {response['id']}")
            print(f"   Code: {response['code']}, Name: {response['name']}")
            print(f"   Country: {response['country']}, Status: {response['status']}")
        
        # Create London Branch location
        location_data_london = {
            "code": "LON",
            "name": "London Branch",
            "country": "United Kingdom",
            "status": "Active"
        }
        
        success, response = self.run_test(
            "Create London Branch Location",
            "POST",
            "locations",
            200,
            data=location_data_london,
            user_role="Administrator"
        )
        
        if success:
            self.test_data['london_location_id'] = response['id']
            print(f"   Created London location with ID: {response['id']}")
        
        # Test 2: GET /api/locations - Retrieve all locations
        success, response = self.run_test(
            "Get All Locations",
            "GET",
            "locations",
            200,
            user_role="Administrator"
        )
        
        if success:
            print(f"   Found {len(response)} locations")
            for location in response:
                print(f"     - {location['code']}: {location['name']} ({location['country']})")
        
        # Test 3: PUT /api/locations/{id} - Update location details
        if 'nyc_location_id' in self.test_data:
            update_data = {
                "name": "New York City Headquarters",
                "status": "Active"
            }
            success, response = self.run_test(
                "Update NYC Location Details",
                "PUT",
                f"locations/{self.test_data['nyc_location_id']}",
                200,
                data=update_data,
                user_role="Administrator"
            )
            
            if success:
                print(f"   Updated location name: {response['name']}")
        
        # Test 4: Validation - Duplicate location code prevention
        duplicate_location = {
            "code": "NYC",  # Same as existing
            "name": "Another NYC Office",
            "country": "United States",
            "status": "Active"
        }
        
        success, response = self.run_test(
            "Create Duplicate Location Code (Should Fail)",
            "POST",
            "locations",
            400,
            data=duplicate_location,
            user_role="Administrator"
        )
        
        if success:
            print("   ‚úÖ Duplicate location code correctly rejected")
        
        return True

    def test_user_location_integration(self):
        """Test User Location Integration Testing"""
        print(f"\nüë• Testing User Location Integration")
        
        if 'nyc_location_id' not in self.test_data:
            print("‚ùå Skipping User Location tests - no location created")
            return False
        
        # Test 5: Create users with location assignment
        user_with_location_data = {
            "email": f"locationuser_{datetime.now().strftime('%H%M%S')}@company.com",
            "name": "Location Test User",
            "roles": ["Employee"],
            "designation": "Software Engineer",
            "location_id": self.test_data['nyc_location_id'],
            "password": "TestPassword123!"
        }
        
        success, response = self.run_test(
            "Create User with Location Assignment",
            "POST",
            "users",
            200,
            data=user_with_location_data,
            user_role="Administrator"
        )
        
        if success:
            self.test_data['location_user_id'] = response['id']
            print(f"   Created user with location: {response['location_name']}")
            print(f"   Location ID: {response.get('location_id', 'Not set')}")
        
        # Test 6: Update user location assignment
        if 'location_user_id' in self.test_data and 'london_location_id' in self.test_data:
            update_data = {
                "location_id": self.test_data['london_location_id']
            }
            success, response = self.run_test(
                "Update User Location Assignment",
                "PUT",
                f"users/{self.test_data['location_user_id']}",
                200,
                data=update_data,
                user_role="Administrator"
            )
            
            if success:
                print(f"   Updated user location to: {response.get('location_name', 'Unknown')}")
        
        # Test 7: Location validation - invalid location_id
        invalid_location_user = {
            "email": f"invalidloc_{datetime.now().strftime('%H%M%S')}@company.com",
            "name": "Invalid Location User",
            "roles": ["Employee"],
            "location_id": "invalid-location-id",
            "password": "TestPassword123!"
        }
        
        success, response = self.run_test(
            "Create User with Invalid Location (Should Fail)",
            "POST",
            "users",
            400,
            data=invalid_location_user,
            user_role="Administrator"
        )
        
        if success:
            print("   ‚úÖ Invalid location_id correctly rejected")
        
        # Test 8: GET /api/users - Verify location_name is included
        success, response = self.run_test(
            "Get Users - Verify Location Names",
            "GET",
            "users",
            200,
            user_role="Administrator"
        )
        
        if success:
            users_with_location = [u for u in response if u.get('location_name')]
            print(f"   Found {len(users_with_location)} users with location assignments")
            if users_with_location:
                user = users_with_location[0]
                print(f"   Sample user location: {user.get('location_name', 'None')}")
        
        return True

    def test_asset_manager_location_assignment(self):
        """Test Asset Manager Location Assignment Testing"""
        print(f"\nüéØ Testing Asset Manager Location Assignment")
        
        if 'nyc_location_id' not in self.test_data:
            print("‚ùå Skipping Asset Manager Location tests - no location created")
            return False
        
        # Get Asset Manager ID
        asset_manager_id = self.users.get("Asset Manager", {}).get("id")
        if not asset_manager_id:
            print("‚ùå Skipping Asset Manager Location tests - no Asset Manager user found")
            return False
        
        # Test 9: POST /api/asset-manager-locations - Assign Asset Managers to locations
        assignment_data = {
            "asset_manager_id": asset_manager_id,
            "location_id": self.test_data['nyc_location_id']
        }
        
        success, response = self.run_test(
            "Assign Asset Manager to NYC Location",
            "POST",
            "asset-manager-locations",
            200,
            data=assignment_data,
            user_role="Administrator"
        )
        
        if success:
            self.test_data['asset_manager_assignment_id'] = response['id']
            print(f"   Assigned {response['asset_manager_name']} to {response['location_name']}")
        
        # Test 10: GET /api/asset-manager-locations - Retrieve assignments
        success, response = self.run_test(
            "Get Asset Manager Location Assignments",
            "GET",
            "asset-manager-locations",
            200,
            user_role="Administrator"
        )
        
        if success:
            print(f"   Found {len(response)} asset manager location assignments")
            for assignment in response:
                print(f"     - {assignment['asset_manager_name']} ‚Üí {assignment['location_name']}")
        
        # Test 11: DELETE /api/asset-manager-locations/{id} - Remove assignments
        if 'asset_manager_assignment_id' in self.test_data:
            success, response = self.run_test(
                "Remove Asset Manager Location Assignment",
                "DELETE",
                f"asset-manager-locations/{self.test_data['asset_manager_assignment_id']}",
                200,
                user_role="Administrator"
            )
            
            if success:
                print("   ‚úÖ Asset Manager location assignment removed successfully")
        
        # Test 12: Validation - Asset Manager role required
        employee_id = self.users.get("Employee", {}).get("id")
        if employee_id:
            invalid_assignment = {
                "asset_manager_id": employee_id,  # Employee, not Asset Manager
                "location_id": self.test_data['nyc_location_id']
            }
            
            success, response = self.run_test(
                "Assign Non-Asset Manager to Location (Should Fail)",
                "POST",
                "asset-manager-locations",
                400,
                data=invalid_assignment,
                user_role="Administrator"
            )
            
            if success:
                print("   ‚úÖ Non-Asset Manager correctly rejected for location assignment")
        
        # Test 13: Validation - Location exists
        invalid_location_assignment = {
            "asset_manager_id": asset_manager_id,
            "location_id": "invalid-location-id"
        }
        
        success, response = self.run_test(
            "Assign Asset Manager to Invalid Location (Should Fail)",
            "POST",
            "asset-manager-locations",
            404,
            data=invalid_location_assignment,
            user_role="Administrator"
        )
        
        if success:
            print("   ‚úÖ Invalid location correctly rejected for assignment")
        
        return True

    def test_data_migration(self):
        """Test Data Migration Testing"""
        print(f"\nüîÑ Testing Data Migration")
        
        # Test 14: POST /api/migrate/set-default-location
        success, response = self.run_test(
            "Set Default Location for Existing Users",
            "POST",
            "migrate/set-default-location",
            200,
            user_role="Administrator"
        )
        
        if success:
            print(f"   Migration completed: {response.get('message', 'Success')}")
            print(f"   Users updated: {response.get('users_updated', 0)}")
            print(f"   Default location created: {response.get('default_location_created', False)}")
        
        # Test 15: Verify default location creation
        success, response = self.run_test(
            "Verify Default Location Exists",
            "GET",
            "locations",
            200,
            user_role="Administrator"
        )
        
        if success:
            default_location = next((loc for loc in response if loc['code'] == 'DEFAULT'), None)
            if default_location:
                print(f"   ‚úÖ Default location found: {default_location['name']}")
                self.test_data['default_location_id'] = default_location['id']
            else:
                print("   ‚ö†Ô∏è Default location not found")
        
        # Test 16: Verify migration only affects users without location
        success, response = self.run_test(
            "Verify Users Have Location Assignments After Migration",
            "GET",
            "users",
            200,
            user_role="Administrator"
        )
        
        if success:
            users_without_location = [u for u in response if not u.get('location_id')]
            users_with_location = [u for u in response if u.get('location_id')]
            print(f"   Users with location: {len(users_with_location)}")
            print(f"   Users without location: {len(users_without_location)}")
            
            if len(users_without_location) == 0:
                print("   ‚úÖ All users now have location assignments")
        
        return True

    def test_data_validation(self):
        """Test Data Validation Testing"""
        print(f"\n‚úÖ Testing Data Validation")
        
        # Test 17: Cascade delete protection - location with assigned users
        if 'nyc_location_id' in self.test_data:
            success, response = self.run_test(
                "Delete Location with Assigned Users (Should Fail)",
                "DELETE",
                f"locations/{self.test_data['nyc_location_id']}",
                400,
                user_role="Administrator"
            )
            
            if success:
                print("   ‚úÖ Location with assigned users correctly protected from deletion")
        
        # Test 18: Cascade delete protection - location with assigned asset managers
        # First, reassign asset manager to test location
        asset_manager_id = self.users.get("Asset Manager", {}).get("id")
        if asset_manager_id and 'london_location_id' in self.test_data:
            assignment_data = {
                "asset_manager_id": asset_manager_id,
                "location_id": self.test_data['london_location_id']
            }
            
            success, response = self.run_test(
                "Assign Asset Manager for Delete Protection Test",
                "POST",
                "asset-manager-locations",
                200,
                data=assignment_data,
                user_role="Administrator"
            )
            
            if success:
                # Now try to delete the location
                success, response = self.run_test(
                    "Delete Location with Assigned Asset Manager (Should Fail)",
                    "DELETE",
                    f"locations/{self.test_data['london_location_id']}",
                    400,
                    user_role="Administrator"
                )
                
                if success:
                    print("   ‚úÖ Location with assigned asset manager correctly protected from deletion")
        
        # Test 19: Duplicate assignment prevention
        if asset_manager_id and 'nyc_location_id' in self.test_data:
            duplicate_assignment = {
                "asset_manager_id": asset_manager_id,
                "location_id": self.test_data['nyc_location_id']
            }
            
            # Create first assignment
            success, response = self.run_test(
                "Create Asset Manager Assignment for Duplicate Test",
                "POST",
                "asset-manager-locations",
                200,
                data=duplicate_assignment,
                user_role="Administrator"
            )
            
            if success:
                # Try to create duplicate
                success, response = self.run_test(
                    "Create Duplicate Asset Manager Assignment (Should Fail)",
                    "POST",
                    "asset-manager-locations",
                    400,
                    data=duplicate_assignment,
                    user_role="Administrator"
                )
                
                if success:
                    print("   ‚úÖ Duplicate asset manager assignment correctly rejected")
        
        return True

    def test_integration_flow(self):
        """Test Integration Flow Testing"""
        print(f"\nüîÑ Testing Integration Flow")
        
        # Test 20: Create sample locations (already done in location management test)
        print("   ‚úÖ Sample locations created (NYC Office, London Branch)")
        
        # Test 21: Create Asset Managers and assign to different locations
        if 'nyc_location_id' in self.test_data:
            asset_manager_id = self.users.get("Asset Manager", {}).get("id")
            if asset_manager_id:
                assignment_data = {
                    "asset_manager_id": asset_manager_id,
                    "location_id": self.test_data['nyc_location_id']
                }
                
                success, response = self.run_test(
                    "Integration: Assign Asset Manager to NYC",
                    "POST",
                    "asset-manager-locations",
                    200,
                    data=assignment_data,
                    user_role="Administrator"
                )
                
                if success:
                    print(f"   ‚úÖ Asset Manager assigned to NYC Office")
        
        # Test 22: Create regular users with location assignments (already done)
        print("   ‚úÖ Regular users created with location assignments")
        
        # Test 23: Run migration for existing users (already done)
        print("   ‚úÖ Migration completed for existing users")
        
        # Test 24: Verify location-based data integrity
        success, response = self.run_test(
            "Integration: Verify Location Data Integrity",
            "GET",
            "locations",
            200,
            user_role="Administrator"
        )
        
        if success:
            locations = response
            
            # Check users for each location
            success, users_response = self.run_test(
                "Integration: Get All Users for Location Verification",
                "GET",
                "users",
                200,
                user_role="Administrator"
            )
            
            if success:
                for location in locations:
                    users_in_location = [u for u in users_response if u.get('location_id') == location['id']]
                    print(f"   Location {location['name']}: {len(users_in_location)} users")
            
            # Check asset manager assignments
            success, assignments_response = self.run_test(
                "Integration: Get Asset Manager Assignments for Verification",
                "GET",
                "asset-manager-locations",
                200,
                user_role="Administrator"
            )
            
            if success:
                print(f"   Total asset manager location assignments: {len(assignments_response)}")
                for assignment in assignments_response:
                    print(f"     - {assignment['asset_manager_name']} ‚Üí {assignment['location_name']}")
        
        print("   ‚úÖ Location-based data integrity verified")
        return True

    def test_location_based_asset_management_system(self):
        """Test complete Location-Based Asset Management System"""
        print(f"\nüåç Testing Complete Location-Based Asset Management System")
        
        success = True
        
        # Run all location-based tests
        if not self.test_location_management_api():
            success = False
        
        if not self.test_user_location_integration():
            success = False
        
        if not self.test_asset_manager_location_assignment():
            success = False
        
        if not self.test_data_migration():
            success = False
        
        if not self.test_data_validation():
            success = False
        
        if not self.test_integration_flow():
            success = False
        
        if success:
            print("   üéâ Location-Based Asset Management System: ALL TESTS PASSED")
        else:
            print("   ‚ö†Ô∏è Location-Based Asset Management System: Some tests failed")
        
        return success

def main():
    print("üöÄ Starting Asset Inventory Management System API Tests")
    print("=" * 60)
    
    tester = AssetInventoryAPITester()
    
    # Test user credentials
    test_users = [
        ("admin@company.com", "password123", "Administrator"),
        ("hr@company.com", "password123", "HR Manager"),
        ("manager@company.com", "password123", "Manager"),
        ("employee@company.com", "password123", "Employee"),
        ("assetmanager@company.com", "password123", "Asset Manager")
    ]
    
    # Test authentication for all users
    print("\nüîê AUTHENTICATION TESTS")
    print("-" * 30)
    login_success = True
    for email, password, role in test_users:
        if not tester.test_login(email, password, role):
            login_success = False
    
    if not any(role in tester.tokens for role in ["HR Manager", "Administrator"]):
        print("\n‚ùå No admin-level users logged in. Cannot proceed with CRUD tests.")
        return 1
    
    # Test /auth/me for all users
    for role in ["Administrator", "HR Manager", "Manager", "Employee", "Asset Manager"]:
        if role in tester.tokens:
            tester.test_auth_me(role)
    
    # Test dashboard stats for all users
    print("\nüìä DASHBOARD TESTS")
    print("-" * 20)
    for role in ["Administrator", "HR Manager", "Manager", "Employee", "Asset Manager"]:
        if role in tester.tokens:
            tester.test_dashboard_stats(role)
    
    # Test CRUD operations
    print("\nüîß CRUD OPERATIONS TESTS")
    print("-" * 25)
    tester.test_asset_type_crud()
    tester.test_asset_definition_crud()
    tester.test_asset_requisition_workflow()
    
    # Test Asset Type Manager Assignment feature
    print("\nüë®‚Äçüíº ASSET TYPE MANAGER ASSIGNMENT TESTS")
    print("-" * 40)
    tester.test_asset_type_manager_assignment()
    
    # Test access control
    tester.test_role_based_access()
    
    # Test validation rules
    tester.test_validation_rules()
    
    # Test new Administrator features
    print("\nüÜï NEW ADMINISTRATOR FEATURES TESTS")
    print("-" * 35)
    tester.test_user_management()
    tester.test_multi_role_system()
    tester.test_company_profile()
    tester.test_password_change()
    tester.test_bulk_import_template()
    tester.test_new_admin_features_access_control()
    
    # Test Asset Manager features
    print("\nüéØ ASSET MANAGER FEATURES TESTS")
    print("-" * 32)
    if "Asset Manager" in tester.tokens:
        tester.test_asset_manager_workflow()
    else:
        print("‚ùå Asset Manager not logged in - skipping Asset Manager tests")
    
    # Test Enhanced Asset Requisition Withdrawal functionality
    print("\nüóëÔ∏è ENHANCED ASSET REQUISITION WITHDRAWAL TESTS")
    print("-" * 45)
    tester.test_asset_requisition_withdrawal()
    tester.test_multi_role_withdrawal_access()
    tester.test_requisition_data_integrity()
    tester.test_role_based_requisition_access_multi_role()
    tester.test_dashboard_stats_multi_role()
    
    # Test SPECIFIC PASSWORD UPDATE AND LOGIN FOR SRIRAM
    print("\nüîê SRIRAM PASSWORD UPDATE AND LOGIN TESTS")
    print("-" * 40)
    tester.test_sriram_password_update_and_login()
    
    # Test EMAIL NOTIFICATION SYSTEM
    print("\nüìß EMAIL NOTIFICATION SYSTEM TESTS")
    print("-" * 35)
    tester.test_email_notification_system()
    
    # Test LOCATION-BASED ASSET MANAGEMENT SYSTEM
    print("\nüåç LOCATION-BASED ASSET MANAGEMENT SYSTEM TESTS")
    print("-" * 50)
    tester.test_location_based_asset_management_system()
    
    # Print final results
    print("\n" + "=" * 60)
    print(f"üìä FINAL RESULTS")
    print(f"Tests Run: {tester.tests_run}")
    print(f"Tests Passed: {tester.tests_passed}")
    print(f"Success Rate: {(tester.tests_passed/tester.tests_run)*100:.1f}%")
    
    if tester.tests_passed == tester.tests_run:
        print("üéâ All tests passed!")
        return 0
    else:
        print(f"‚ö†Ô∏è  {tester.tests_run - tester.tests_passed} tests failed")
        return 1

if __name__ == "__main__":
    sys.exit(main())